# ======================= –ò–ú–ü–û–†–¢–´ –ò –ù–ê–°–¢–†–û–ô–ö–ò ======================= #
import os
import logging
import re
import pandas as pd
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from sqlalchemy import create_engine, Column, Integer, String, Float, ForeignKey, DateTime, Boolean
from sqlalchemy.orm import declarative_base, Session, sessionmaker, relationship
from sqlalchemy.sql import func
import datetime
import io
from dotenv import load_dotenv
load_dotenv()  # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

print("–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:", os.getcwd())
print("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:", os.listdir())


BOT_TOKEN = os.getenv("BOT_TOKEN")
print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω: {BOT_TOKEN}")



# ======================= –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ï–†–ê ======================= #
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# ======================= –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ======================= #

BOT_TOKEN = os.getenv("BOT_TOKEN")  # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not BOT_TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN.")

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

# ======================= –ë–ê–ó–ê –î–ê–ù–ù–´–• ======================= #
Base = declarative_base()

def get_database_url():
    return os.getenv("DATABASE_URL", "sqlite:///database.db")  # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PostgreSQL –∏–ª–∏ –¥—Ä—É–≥—É—é –°–£–ë–î

engine = create_engine(get_database_url())
Session = sessionmaker(bind=engine)

class AuthState(StatesGroup):
    enter_name = State()       # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    enter_password = State()   # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è

class Product(Base):
    __tablename__ = "products"
    id = Column(Integer, primary_key=True)
    name = Column(String(50), unique=True, nullable=False)
    purchase_price = Column(Float)
    sale_price = Column(Float)
    sale_price_2 = Column(Float)  # –ù–æ–≤–∞—è —Ü–µ–Ω–∞ –∑–∞ 2 —à—Ç
    flavors = relationship("Flavor", back_populates="product", cascade="all, delete-orphan")
    sales = relationship("Sale", back_populates="product")

class RecordDefectState(StatesGroup):
    select_product = State()
    select_flavor = State()
    enter_quantity = State()


class Flavor(Base):
    __tablename__ = "flavors"
    id = Column(Integer, primary_key=True)
    name = Column(String(100))
    quantity = Column(Integer)
    product_id = Column(Integer, ForeignKey("products.id"))
    product = relationship("Product", back_populates="flavors")
    sales = relationship("Sale", back_populates="flavor")

class EditSaleState(StatesGroup):
    select_customer = State()
    select_sale = State()
    select_action = State()
    select_product = State()
    select_flavor = State()
    enter_quantity = State()


class Customer(Base):
    __tablename__ = "customers"
    id = Column(Integer, primary_key=True)
    name = Column(String(100), nullable=False, unique=True)
    date = Column(DateTime, default=datetime.datetime.now)  # –î–æ–±–∞–≤–ª–µ–Ω–æ!
    sales = relationship("Sale", back_populates="customer")


class Sale(Base):
    __tablename__ = "sales"
    id = Column(Integer, primary_key=True)
    product_id = Column(Integer, ForeignKey("products.id"))
    flavor_id = Column(Integer, ForeignKey("flavors.id"))
    customer_id = Column(Integer, ForeignKey("customers.id"), nullable=True)  # –°–≤—è–∑—å —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º
    quantity = Column(Integer)
    purchase_price = Column(Float)
    sale_price = Column(Float)
    date = Column(DateTime, default=datetime.datetime.now)

    product = relationship("Product", back_populates="sales")
    flavor = relationship("Flavor", back_populates="sales")
    customer = relationship("Customer", back_populates="sales")

class WorkerIncome(Base):
    __tablename__ = "worker_income"
    id = Column(Integer, primary_key=True)
    week_start = Column(DateTime)
    income = Column(Float)
    is_current = Column(Boolean, default=True)

# === –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ ===
Base.metadata.create_all(engine)  # –¢–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ–º –∑–¥–µ—Å—å

class RecordSaleState(StatesGroup):
    select_product = State()
    select_flavor = State()
    enter_quantity = State()
    enter_custom_quantity = State()
    confirm_more_items = State()  # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –¥–æ–±–∞–≤–∏—Ç—å –ª–∏ –µ—â—ë —Ç–æ–≤–∞—Ä
    enter_customer_name = State()







# ======================= –°–û–°–¢–û–Ø–ù–ò–Ø FSM ======================= #
class AddProductState(StatesGroup):
    enter_name = State()
    enter_prices = State()  # –¢–µ–ø–µ—Ä—å –æ–∂–∏–¥–∞–µ—Ç 3 –∑–Ω–∞—á–µ–Ω–∏—è
    enter_flavors = State()

    class CancelState(StatesGroup):
        confirm_cancel = State()

class EditProductState(StatesGroup):
    select_product = State()
    select_action = State()
    update_prices = State()
    add_flavors = State()
    remove_flavors = State()
    update_flavor_quantity = State()  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ!
    confirm_delete = State()
    select_flavor = State()


class FileUploadState(StatesGroup):
    waiting_file = State()


# ======================= –£–¢–ò–õ–ò–¢–´ ======================= #
def parse_flavor_line(line: str):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ —Å –≤–∫—É—Å–æ–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º"""
    try:
        match = re.search(r'(.*?)\s+(\d+)$', line.strip())
        if not match:
            raise ValueError
        return match.group(1).strip(), int(match.group(2))
    except Exception:
        raise ValueError(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ: {line}")



# ======================= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ======================= #

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(AuthState.enter_name)

@dp.message(AuthState.enter_name)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if not name:
        await message.answer("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –∏–º—è:")
        return
    await state.update_data(user_name=name)
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {name}! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    await state.set_state(AuthState.enter_password)

@dp.message(AuthState.enter_password)
async def process_password(message: types.Message, state: FSMContext):
    correct_password = "5178"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å
    if message.text == correct_password:
        data = await state.get_data()
        user_name = data.get("user_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        await state.update_data(authenticated=True)
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.")
        await send_main_menu(message)
        await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞:")

@dp.message(AuthState.enter_password, F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_auth(message: types.Message, state: FSMContext):
    await message.answer("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    await send_main_menu(message)
    await state.clear()

async def send_main_menu(message: types.Message):
    markup = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏"), types.KeyboardButton(text="üíµ –ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–∂—É")],
            [types.KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏"), types.KeyboardButton(text="üì¶ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã")],
            [types.KeyboardButton(text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"), types.KeyboardButton(text="–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å")]
        ],
        resize_keyboard=True
    )
    await message.answer("üè™ <b>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

async def save_sale(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"""

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()

    # üõë –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ sales_list. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äì —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ –∏ –≤—ã—Ö–æ–¥–∏–º
    if "sales_list" not in data or not data["sales_list"]:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–∂ –ø—É—Å—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    customer_name = data.get("customer_name", "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å 1")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –∏–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ

    with Session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –≤ –ë–î
        customer = session.query(Customer).filter_by(name=customer_name).first()
        if not customer:
            customer = Customer(name=customer_name, date=datetime.datetime.now())
            session.add(customer)
            session.commit()

        total_revenue = 0
        total_profit = 0
        sale_texts = []
        insufficient_stock = []

        # üîπ **–®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ (–±–µ–∑ —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞)**
        for sale in data["sales_list"]:
            product = session.query(Product).filter_by(name=sale["product_name"]).first()
            flavor = session.query(Flavor).filter_by(name=sale["flavor_name"], product_id=product.id).first()

            if not flavor:
                insufficient_stock.append(f"‚ùå {sale['flavor_name']} (–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏)")
                continue

            session.refresh(flavor)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            if flavor.quantity < sale["quantity"]:
                insufficient_stock.append(f"‚ùå {sale['flavor_name']} (–≤ –Ω–∞–ª–∏—á–∏–∏: {flavor.quantity})")

        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ–¥–∞–∂—É
        if insufficient_stock:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞!\n" + "\n".join(insufficient_stock))
            return

        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (—Å—É–º–º–∏—Ä—É–µ–º –ø–æ –≤—Å–µ–º –≤–∫—É—Å–∞–º)
        product_totals = {}
        for sale in data["sales_list"]:
            product_totals[sale["product_name"]] = product_totals.get(sale["product_name"], 0) + sale["quantity"]

        # üîπ **–®–∞–≥ 2: –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ–¥–∞–∂—É**
        for sale in data["sales_list"]:
            product = session.query(Product).filter_by(name=sale["product_name"]).first()
            flavor = session.query(Flavor).filter_by(name=sale["flavor_name"], product_id=product.id).first()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
            if flavor.quantity < sale["quantity"]:
                insufficient_stock.append(f"‚ùå {sale['flavor_name']} (–≤ –Ω–∞–ª–∏—á–∏–∏: {flavor.quantity})")
                continue

            # –í—ã–±–∏—Ä–∞–µ–º —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –¥–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞
            if product_totals[sale["product_name"]] >= 2:
                sale_price = product.sale_price_2  # –¶–µ–Ω–∞ –∑–∞ 2 —à—Ç
            else:
                sale_price = product.sale_price  # –¶–µ–Ω–∞ –∑–∞ 1 —à—Ç

            # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ
            new_quantity = flavor.quantity - sale["quantity"]
            session.query(Flavor).filter_by(id=flavor.id).update({"quantity": new_quantity})

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–¥–∞–∂–µ
            sale_record = Sale(
                product=product,
                flavor=flavor,
                customer=customer,
                quantity=sale["quantity"],
                purchase_price=product.purchase_price,
                sale_price=sale_price  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ü–µ–Ω—É
            )
            session.add(sale_record)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã—Ä—É—á–∫—É –∏ –ø—Ä–∏–±—ã–ª—å
            revenue = sale["quantity"] * sale_price
            profit = (sale_price - product.purchase_price) * sale["quantity"]
            total_revenue += revenue
            total_profit += profit

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–∂–µ –≤ –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            sale_texts.append(
                f"üì¶ <b>{sale['product_name']}</b> - {sale['flavor_name']} - {sale['quantity']} —à—Ç. ({sale_price} ‚ÇΩ/—à—Ç)")

        # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î **–æ–¥–Ω–∏–º –∫–æ–º–º–∏—Ç–æ–º**
        session.commit()

        # ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response_text = (
            f"‚úÖ <b>–ü—Ä–æ–¥–∞–∂–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
            f"üë§ <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> {customer_name}\n\n"
            f"{'\n'.join(sale_texts)}\n"
            f"üí∞ <b>–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞:</b> {total_revenue:.2f} ‚ÇΩ\n"
            f"üìä <b>–ü—Ä–∏–±—ã–ª—å:</b> {total_profit:.2f} ‚ÇΩ"
        )

        await message.answer(response_text, parse_mode="HTML")

    await state.clear()  # ‚úÖ –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ "–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é"


@dp.message(F.text == "–ë—Ä–∞–∫")
async def start_defect_recording(message: types.Message, state: FSMContext):
    try:
        with Session() as session:
            # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –±—Ä–∞–∫–∞ (customer is None)
            products = session.query(Product).join(Sale).filter(Sale.customer == None).distinct().all()
            if not products:
                markup = types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –±—Ä–∞–∫", callback_data="register_defect_new")]
                ])
                await message.answer("üì≠ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±—Ä–∞–∫–∞ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è.", reply_markup=markup)
                return
            product_buttons = [
                [types.InlineKeyboardButton(text=p.name, callback_data=f"defect_product_{p.id}")]
                for p in products
            ]
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±—Ä–∞–∫–∞ –∏ –∫–Ω–æ–ø–∫—É "üîô –ù–∞–∑–∞–¥"
            product_buttons.append([types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –±—Ä–∞–∫", callback_data="register_defect_new")])
            product_buttons.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")])
            markup = types.InlineKeyboardMarkup(inline_keyboard=product_buttons)
            await message.answer("üìã –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –±—Ä–∞–∫–æ–º:", reply_markup=markup)
            await state.set_state(RecordDefectState.select_product)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –±—Ä–∞–∫–∞: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –±—Ä–∞–∫–∞")


@dp.callback_query(F.data.startswith("defect_product_"), RecordDefectState.select_product)
async def show_defect_history(callback: types.CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split("_")[-1])
    await state.update_data(product_id=product_id)
    with Session() as session:
        product = session.query(Product).get(product_id)
        defects = session.query(Sale).filter_by(product_id=product_id, customer=None).all()
        if not defects:
            defect_info = "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±—Ä–∞–∫–∞."
        else:
            total_defect_qty = sum(defect.quantity for defect in defects)
            total_loss = product.purchase_price * total_defect_qty
            defect_info = (f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∞–∫–∞: {total_defect_qty} —à—Ç.\n"
                           f"–£–±—ã—Ç–æ–∫: {total_loss:.2f} ‚ÇΩ")
        markup = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –±—Ä–∞–∫", callback_data=f"register_defect_{product_id}")],
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_defect_list")]
        ])
        await callback.message.edit_text(f"üìå –¢–æ–≤–∞—Ä: {product.name}\n{defect_info}", reply_markup=markup)
        await state.set_state(RecordDefectState.select_product)

@dp.callback_query(F.data == "back_to_defect_list", RecordDefectState.select_product)
async def back_to_defect_list(callback: types.CallbackQuery, state: FSMContext):
    await start_defect_recording(callback.message, state)

@dp.callback_query(F.data.startswith("register_defect_"), RecordDefectState.select_product)
async def register_defect_start(callback: types.CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split("_")[-1])
    await state.update_data(product_id=product_id)
    with Session() as session:
        product = session.query(Product).get(product_id)
        if not product or not product.flavors:
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∫—É—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞!", show_alert=True)
            return
        flavor_buttons = [
            [types.InlineKeyboardButton(text=f"{flavor.name} ({flavor.quantity})", callback_data=f"defect_flavor_{flavor.id}")]
            for flavor in product.flavors if flavor.quantity > 0
        ]
        flavor_buttons.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_defect_list")])
        markup = types.InlineKeyboardMarkup(inline_keyboard=flavor_buttons)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±—Ä–∞–∫–∞:", reply_markup=markup)
        await state.set_state(RecordDefectState.select_flavor)

@dp.callback_query(F.data == "back_to_defect_products", RecordDefectState.select_flavor)
async def back_to_defect_products(callback: types.CallbackQuery, state: FSMContext):
    with Session() as session:
        products = session.query(Product).all()
        if not products:
            await callback.message.answer("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –±—Ä–∞–∫–∞")
            return
        product_buttons = [
            [types.InlineKeyboardButton(text=p.name, callback_data=f"defect_product_{p.id}")]
            for p in products
        ]
        product_buttons.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")])
        markup = types.InlineKeyboardMarkup(inline_keyboard=product_buttons)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –±—Ä–∞–∫–∞:", reply_markup=markup)
        await state.set_state(RecordDefectState.select_product)

@dp.callback_query(F.data.startswith("defect_flavor_"), RecordDefectState.select_flavor)
async def select_defect_flavor(callback: types.CallbackQuery, state: FSMContext):
    flavor_id = int(callback.data.split("_")[-1])
    await state.update_data(flavor_id=flavor_id)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—Ä–∞–∫–æ–≤–∞–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü:")
    await state.set_state(RecordDefectState.enter_quantity)

@dp.message(RecordDefectState.enter_quantity)
async def enter_defect_quantity(message: types.Message, state: FSMContext):
    try:
        quantity = int(message.text)
        if quantity <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!")
            return
        data = await state.get_data()
        with Session() as session:
            product = session.query(Product).get(data["product_id"])
            flavor = session.query(Flavor).get(data["flavor_id"])
            if flavor.quantity < quantity:
                await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ! –û—Å—Ç–∞–ª–æ—Å—å: {flavor.quantity}")
                return
            # –í—ã—á–∏—Ç–∞–µ–º –±—Ä–∞–∫ –∏–∑ –æ—Å—Ç–∞—Ç–∫–∞
            flavor.quantity -= quantity

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±—Ä–∞–∫ –∫–∞–∫ –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–æ–¥–∞–∂:
            sale_record = Sale(
                product=product,
                flavor=flavor,
                customer=None,  # –¥–ª—è –±—Ä–∞–∫–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–µ –Ω—É–∂–µ–Ω
                quantity=quantity,
                purchase_price=product.purchase_price,
                sale_price=0
            )
            session.add(sale_record)

            # –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É –±—Ä–∞–∫–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Ö–æ–¥ —Ä–∞–±–æ—á–µ–≥–æ:
            defective_amount = product.purchase_price * quantity
            today = datetime.datetime.now().date()
            current_week_start = datetime.datetime.combine(
                today - datetime.timedelta(days=today.weekday()),
                datetime.time.min
            )
            income_record = session.query(WorkerIncome).filter(WorkerIncome.week_start == current_week_start).first()
            if not income_record:
                income_record = WorkerIncome(
                    week_start=current_week_start,
                    income=0.0,
                    is_current=True
                )
                session.add(income_record)
            # –í—ã—á–∏—Ç–∞–µ—Ç—Å—è 30% —É–±—ã—Ç–∫–∞ (—Ä–∞–±–æ—á–µ–º—É –≤—ã—á—Ç–µ–Ω–æ 30%, –º–∞–≥–∞–∑–∏–Ω ‚Äì 70%)
            income_record.income -= defective_amount * 0.3

            session.commit()
            await message.answer(
                f"‚úÖ –ë—Ä–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n"
                f"üì¶ –¢–æ–≤–∞—Ä: {product.name}\n"
                f"üçè –í–∫—É—Å: {flavor.name}\n"
                f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.\n"
                f"üí∞ –£–±—ã—Ç–æ–∫: {defective_amount:.2f} ‚ÇΩ (–∏–∑ –Ω–∏—Ö —Ä–∞–±–æ—á–µ–º—É –≤—ã—á—Ç–µ–Ω–æ: {defective_amount * 0.3:.2f} ‚ÇΩ)"
            )
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±—Ä–∞–∫–∞: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±—Ä–∞–∫–∞")
        await state.clear()

@dp.callback_query(F.data == "register_defect_new")

async def register_defect_new(callback: types.CallbackQuery, state: FSMContext):
    with Session() as session:
        products = session.query(Product).all()
        if not products:
            await callback.message.answer("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –±—Ä–∞–∫–∞")
            return
        product_buttons = [
            [types.InlineKeyboardButton(text=p.name, callback_data=f"defect_product_{p.id}")]
            for p in products
        ]
        product_buttons.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")])
        markup = types.InlineKeyboardMarkup(inline_keyboard=product_buttons)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±—Ä–∞–∫–∞:", reply_markup=markup)
        await state.set_state(RecordDefectState.select_product)





@dp.callback_query(F.data == "back_to_customers", EditSaleState.select_sale)
async def back_to_customers_list(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π"""
    await start_edit_sale(callback.message, state)


@dp.callback_query(F.data == "back_to_sales_list", EditSaleState.select_action)
async def back_to_sales_list(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–¥–∞–∂ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"""
    data = await state.get_data()
    customer_id = data.get('customer_id')

    with Session() as session:
        customer = session.get(Customer, customer_id)
        sales = session.query(Sale).filter_by(customer_id=customer_id).all()

        buttons = [
            [InlineKeyboardButton(
                text=f"{sale.product.name} - {sale.flavor.name} ({sale.quantity} —à—Ç.)",
                callback_data=f"select_sale_{sale.id}"
            )] for sale in sales
        ]
        buttons.append([InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥–∞–∂–∏", callback_data="delete_all_sales")])
        buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_customers")])

        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.edit_text(f"–ü—Ä–æ–¥–∞–∂–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è {customer.name}:", reply_markup=markup)
        await state.set_state(EditSaleState.select_sale)



@dp.callback_query(F.data == "add_more", RecordSaleState.confirm_more_items)
async def add_more_items(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ç–æ–≤–∞—Ä' —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞."""
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤, —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–¥–∞–∂—É)
        await callback.message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞.
    # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å callback.message.chat.id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    await start_sale_recording(callback.message, state)


@dp.callback_query(F.data == "finish_sale", RecordSaleState.confirm_more_items)
async def ask_for_customer_name(callback: types.CallbackQuery, state: FSMContext):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤–≤–æ–¥–∏—Ç—å –∏–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"""
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="enter_customer_name")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="skip_customer_name")]
    ])
    await callback.message.edit_text("–î–æ–±–∞–≤–∏—Ç—å –∏–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è?", reply_markup=markup)


@dp.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏")
async def start_edit_sale(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏"""
    with Session() as session:
        customers = session.query(Customer).order_by(Customer.id.desc()).all()
        if not customers:
            await message.answer("‚ùå –ù–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        buttons = [
            [InlineKeyboardButton(text=f"üë§ {customer.name}", callback_data=f"edit_customer_{customer.id}")]
            for customer in customers
        ]
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:", reply_markup=markup)
        await state.set_state(EditSaleState.select_customer)


@dp.callback_query(F.data.startswith("edit_customer_"), EditSaleState.select_customer)
async def select_customer_sales(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø—Ä–æ–¥–∞–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"""
    customer_id = int(callback.data.split("_")[-1])
    await state.update_data(customer_id=customer_id)

    with Session() as session:
        customer = session.get(Customer, customer_id)
        sales = session.query(Sale).filter_by(customer_id=customer_id).all()

        if not sales:
            await callback.answer("‚ùå –£ —ç—Ç–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–æ–¥–∞–∂", show_alert=True)
            await state.clear()
            return

        buttons = [
            [InlineKeyboardButton(
                text=f"{sale.product.name} - {sale.flavor.name} ({sale.quantity} —à—Ç.)",
                callback_data=f"select_sale_{sale.id}"
            )] for sale in sales
        ]
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥–∞–∂–∏" –∏ "–ù–∞–∑–∞–¥"
        buttons.append([InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥–∞–∂–∏", callback_data="delete_all_sales")])
        buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_customers")])

        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        await callback.message.edit_text(
            f"–ü—Ä–æ–¥–∞–∂–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è {customer.name}:",
            reply_markup=markup
        )
        await state.set_state(EditSaleState.select_sale)


@dp.callback_query(F.data == "delete_all_sales", EditSaleState.select_sale)
async def delete_all_sales_confirmation(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–¥–∞–∂ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"""
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete_all_sales")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_delete_all_sales")]
    ])
    await callback.message.edit_text(
        "‚ùó –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –ø—Ä–æ–¥–∞–∂–∏ —ç—Ç–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è? –¢–æ–≤–∞—Ä—ã –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ —Å–∫–ª–∞–¥.",
        reply_markup=markup
    )


@dp.callback_query(F.data == "confirm_delete_all_sales", EditSaleState.select_sale)
async def confirm_delete_all_sales(callback: types.CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–¥–∞–∂ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥ –∏ —É–¥–∞–ª–µ–Ω–∏–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"""
    data = await state.get_data()
    customer_id = data.get('customer_id')

    with Session() as session:
        customer = session.get(Customer, customer_id)
        sales = session.query(Sale).filter_by(customer_id=customer_id).all()

        if not sales:
            await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–æ–¥–∞–∂ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
            return

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä—ã –Ω–∞ —Å–∫–ª–∞–¥
        for sale in sales:
            sale.flavor.quantity += sale.quantity

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        session.query(Sale).filter_by(customer_id=customer_id).delete()

        # –£–¥–∞–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
        session.delete(customer)
        session.commit()

        await callback.message.edit_text(
            f"‚úÖ –í—Å–µ –ø—Ä–æ–¥–∞–∂–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è {customer.name} —É–¥–∞–ª–µ–Ω—ã. –¢–æ–≤–∞—Ä—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ —Å–∫–ª–∞–¥. –ü–æ–∫—É–ø–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞."
        )

    await state.clear()



@dp.callback_query(F.data == "cancel_delete_all_sales", EditSaleState.select_sale)
async def cancel_delete_all_sales(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–¥–∞–∂"""
    data = await state.get_data()
    customer_id = data.get('customer_id')

    with Session() as session:
        customer = session.get(Customer, customer_id)
        sales = session.query(Sale).filter_by(customer_id=customer_id).all()

        buttons = [
            [InlineKeyboardButton(
                text=f"{sale.product.name} - {sale.flavor.name} ({sale.quantity} —à—Ç.)",
                callback_data=f"select_sale_{sale.id}"
            )] for sale in sales
        ]
        buttons.append([InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥–∞–∂–∏", callback_data="delete_all_sales")])
        buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_customers")])

        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.edit_text(f"–ü—Ä–æ–¥–∞–∂–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è {customer.name}:", reply_markup=markup)
        await state.set_state(EditSaleState.select_sale)





@dp.callback_query(F.data.startswith("select_sale_"), EditSaleState.select_sale)
async def select_sale_action(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ–¥–∞–∂–∏ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ"""
    sale_id = int(callback.data.split("_")[-1])
    await state.update_data(sale_id=sale_id)

    with Session() as session:
        sale = session.get(Sale, sale_id)
        if not sale:
            await callback.answer("‚ùå –ü—Ä–æ–¥–∞–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        product = sale.product
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        product_info = f"üìå <b>{product.name.upper()}</b>\n"
        product_info += f"–ó–∞–∫—É–ø: {int(product.purchase_price)}‚ÇΩ\n"
        product_info += f"–ü—Ä–æ–¥–∞–∂–∞: {int(product.sale_price)}‚ÇΩ\n"
        product_info += f"–ê–∫—Ü–∏—è (–æ—Ç 2 —à—Ç): {int(product.sale_price_2)}‚ÇΩ\n"
        product_info += "–û—Å—Ç–∞—Ç–∫–∏ –ø–æ –≤–∫—É—Å–∞–º:\n"
        for flavor in product.flavors:
            product_info += f" - {flavor.name}: {flavor.quantity} —à—Ç.\n"

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –ø—Ä–æ–¥–∞–∂–µ
        sale_info = (
            f"\n–¢–µ–∫—É—â–∞—è –ø—Ä–æ–¥–∞–∂–∞:\n"
            f"üì¶ –¢–æ–≤–∞—Ä: {sale.product.name}\n"
            f"üçè –í–∫—É—Å: {sale.flavor.name}\n"
            f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {sale.quantity} —à—Ç.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        full_text = product_info + sale_info

        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_sale")],
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product_to_sale")],
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="delete_sale")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_sales_list")]
        ])
        await callback.message.edit_text(full_text, reply_markup=markup, parse_mode="HTML")
        await state.set_state(EditSaleState.select_action)


@dp.callback_query(F.data == "add_product_to_sale", EditSaleState.select_action)
async def add_product_to_sale(callback: types.CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –ø—Ä–æ–¥–∞–∂—É"""
    with Session() as session:
        products = session.query(Product).all()
        buttons = [
            [InlineKeyboardButton(text=product.name, callback_data=f"add_product_{product.id}")]
            for product in products
        ]
        buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_sale_actions")])
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–æ–¥–∞–∂—É:", reply_markup=markup)
        await state.set_state(EditSaleState.select_product)

@dp.callback_query(F.data.startswith("add_product_"), EditSaleState.select_product)
async def select_product_to_add(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–æ–¥–∞–∂—É"""
    product_id = int(callback.data.split("_")[-1])
    await state.update_data(product_id=product_id)

    with Session() as session:
        product = session.get(Product, product_id)
        flavors = [flavor for flavor in product.flavors if flavor.quantity > 0]  # –£–±–∏—Ä–∞–µ–º –∑–∞–∫–æ–Ω—á–∏–≤—à–∏–µ—Å—è –≤–∫—É—Å—ã

        if not flavors:
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∫—É—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞!", show_alert=True)
            await add_product_to_sale(callback, state)
            return

        buttons = [
            [InlineKeyboardButton(text=f"{flavor.name} ({flavor.quantity} —à—Ç.)",
                                  callback_data=f"add_flavor_{flavor.id}")]
            for flavor in flavors
        ]
        buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_products_list")])
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–æ–¥–∞–∂—É:", reply_markup=markup)
        await state.set_state(EditSaleState.select_flavor)


@dp.callback_query(F.data.startswith("add_flavor_"), EditSaleState.select_flavor)
async def select_flavor_to_add(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –≤–∫—É—Å–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø—Ä–æ–¥–∞–∂—É"""
    flavor_id = int(callback.data.split("_")[-1])
    await state.update_data(flavor_id=flavor_id)

    with Session() as session:
        flavor = session.get(Flavor, flavor_id)
        if flavor.quantity <= 0:
            await callback.answer("‚ùå –≠—Ç–æ—Ç –≤–∫—É—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.", show_alert=True)
            await select_product_to_add(callback, state)
            return

    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
    await state.set_state(EditSaleState.enter_quantity)


@dp.message(EditSaleState.enter_quantity)
async def save_added_sale(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –ø—Ä–æ–¥–∞–∂—É"""
    try:
        new_quantity = int(message.text)
        if new_quantity <= 0:
            raise ValueError

        data = await state.get_data()

        with Session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ
            customer = session.get(Customer, data['customer_id'])

            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            new_product = session.get(Product, data['product_id'])
            new_flavor = session.get(Flavor, data['flavor_id'])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if new_flavor.quantity < new_quantity:
                await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞! –î–æ—Å—Ç—É–ø–Ω–æ: {new_flavor.quantity}")
                return

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø—Ä–æ–¥–∞–∂—É
            new_sale = Sale(
                product_id=new_product.id,
                flavor_id=new_flavor.id,
                customer_id=customer.id,
                quantity=new_quantity,
                purchase_price=new_product.purchase_price,
                sale_price=new_product.sale_price
            )

            # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ
            new_flavor.quantity -= new_quantity

            session.add(new_sale)
            session.commit()

            await message.answer(
                f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–¥–∞–∂—É!\n"
                f"üì¶ –¢–æ–≤–∞—Ä: {new_product.name}\n"
                f"üçè –í–∫—É—Å: {new_flavor.name}\n"
                f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {new_quantity}"
            )

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!")
    finally:
        await state.clear()


@dp.callback_query(F.data == "back_to_sale_actions", EditSaleState.select_product)
async def back_to_sale_actions(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –¥–µ–π—Å—Ç–≤–∏—è–º —Å –ø—Ä–æ–¥–∞–∂–µ–π"""
    data = await state.get_data()
    sale_id = data.get('sale_id')

    with Session() as session:
        sale = session.get(Sale, sale_id)
        if not sale:
            await callback.answer("‚ùå –ü—Ä–æ–¥–∞–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –∏ –≤–∫—É—Å
        selected_text = (
            f"üì¶ –¢–æ–≤–∞—Ä: {sale.product.name}\n"
            f"üçè –í–∫—É—Å: {sale.flavor.name}\n"
            f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {sale.quantity} —à—Ç.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )

        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_sale")],
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product_to_sale")],
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="delete_sale")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_sales_list")]
        ])
        await callback.message.edit_text(selected_text, reply_markup=markup)
        await state.set_state(EditSaleState.select_action)


@dp.callback_query(F.data == "edit_sale", EditSaleState.select_action)
async def start_sale_editing(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏"""
    with Session() as session:
        products = session.query(Product).all()
        buttons = [
            [InlineKeyboardButton(text=product.name, callback_data=f"edit_product_{product.id}")]
            for product in products
        ]
        buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_sale_actions")])
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä:", reply_markup=markup)
        await state.set_state(EditSaleState.select_product)


@dp.callback_query(F.data.startswith("edit_product_"), EditSaleState.select_product)
async def select_product_for_edit(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    product_id = int(callback.data.split("_")[-1])
    await state.update_data(product_id=product_id)

    with Session() as session:
        product = session.get(Product, product_id)
        flavors = [flavor for flavor in product.flavors if flavor.quantity > 0]  # –£–±–∏—Ä–∞–µ–º –∑–∞–∫–æ–Ω—á–∏–≤—à–∏–µ—Å—è –≤–∫—É—Å—ã

        if not flavors:
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∫—É—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞!", show_alert=True)
            await start_sale_editing(callback, state)
            return

        buttons = [
            [InlineKeyboardButton(text=f"{flavor.name} ({flavor.quantity} —à—Ç.)", callback_data=f"edit_flavor_{flavor.id}")]
            for flavor in flavors
        ]
        buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_products_list")])
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –≤–∫—É—Å:", reply_markup=markup)
        await state.set_state(EditSaleState.select_flavor)


@dp.callback_query(F.data.startswith("edit_flavor_"), EditSaleState.select_flavor)
async def select_flavor_for_edit(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ –≤–∫—É—Å–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    flavor_id = int(callback.data.split("_")[-1])
    await state.update_data(flavor_id=flavor_id)

    with Session() as session:
        flavor = session.get(Flavor, flavor_id)
        if flavor.quantity <= 0:
            await callback.answer("‚ùå –≠—Ç–æ—Ç –≤–∫—É—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.", show_alert=True)
            await select_product_for_edit(callback, state)
            return

    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    await state.set_state(EditSaleState.enter_quantity)


@dp.message(EditSaleState.enter_quantity)
async def save_edited_sale(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø—Ä–æ–¥–∞–∂–µ"""
    try:
        new_quantity = int(message.text)
        if new_quantity <= 0:
            raise ValueError

        data = await state.get_data()

        with Session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –ø—Ä–æ–¥–∞–∂—É
            original_sale = session.get(Sale, data['sale_id'])

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            original_sale.flavor.quantity += original_sale.quantity

            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            new_product = session.get(Product, data['product_id'])
            new_flavor = session.get(Flavor, data['flavor_id'])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if new_flavor.quantity < new_quantity:
                await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞! –î–æ—Å—Ç—É–ø–Ω–æ: {new_flavor.quantity}")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–¥–∞–∂—É
            new_flavor.quantity -= new_quantity
            original_sale.product_id = new_product.id
            original_sale.flavor_id = new_flavor.id
            original_sale.quantity = new_quantity

            session.commit()

            await message.answer(
                f"‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n"
                f"üì¶ –ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä: {new_product.name}\n"
                f"üçè –ù–æ–≤—ã–π –≤–∫—É—Å: {new_flavor.name}\n"
                f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {new_quantity}"
            )

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!")
    finally:
        await state.clear()

@dp.callback_query(F.data == "back_to_flavors", RecordSaleState.enter_quantity)
async def back_to_flavors(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É –≤–∫—É—Å–∞"""
    data = await state.get_data()
    product_id = data.get("product_id")

    if not product_id:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ —É—Ç–µ—Ä—è–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    with Session() as session:
        product = session.query(Product).get(product_id)

        if not product or not product.flavors:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –∏–ª–∏ –≤–∫—É—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.clear()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∫—É—Å–∞
        flavor_buttons = [
            [InlineKeyboardButton(text=f"{flavor.name} ({flavor.quantity})", callback_data=f"flavor_{flavor.id}")]
            for flavor in product.flavors
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∫ —Å–ø–∏—Å–∫—É –≤–∫—É—Å–æ–≤
        flavor_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º", callback_data="back_to_products")])

        markup = InlineKeyboardMarkup(inline_keyboard=flavor_buttons)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –µ–≥–æ –Ω–∞ –≤—ã–±–æ—Ä –≤–∫—É—Å–∞
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å:", reply_markup=markup)
        await state.set_state(RecordSaleState.select_flavor)  # üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–∑–∞–¥


@dp.message(F.text == "üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü")
async def download_month_report(message: types.Message):
    with Session() as session:
        try:
            today = datetime.date.today()
            first_day = datetime.date(today.year, today.month, 1)
            last_day = datetime.date(
                today.year + (today.month // 12),
                (today.month % 12) + 1, 1
            ) - datetime.timedelta(days=1)

            date_range = pd.date_range(start=first_day, end=last_day)

            report_data = []
            for single_date in date_range:
                sales = session.query(Sale).filter(
                    func.date(Sale.date) == single_date.date()
                ).all()

                total_sales = len(sales)
                total_revenue = sum(s.sale_price * s.quantity for s in sales)
                total_profit = sum((s.sale_price - s.purchase_price) * s.quantity for s in sales)
                lena_income = total_profit * 0.3

                report_data.append({
                    "–î–∞—Ç–∞": single_date.strftime("%d.%m.%Y"),
                    "–ü—Ä–æ–¥–∞–∂–∏": total_sales,
                    "–î–æ—Ö–æ–¥": total_revenue,
                    "–ü—Ä–∏–±—ã–ª—å": total_profit,
                    "–î–æ—Ö–æ–¥ –õ—ë–Ω–∏": lena_income
                })

            df = pd.DataFrame(report_data)
            totals = pd.DataFrame([{
                "–î–∞—Ç–∞": "–ò–¢–û–ì–û:",
                "–ü—Ä–æ–¥–∞–∂–∏": df["–ü—Ä–æ–¥–∞–∂–∏"].sum(),
                "–î–æ—Ö–æ–¥": df["–î–æ—Ö–æ–¥"].sum(),
                "–ü—Ä–∏–±—ã–ª—å": df["–ü—Ä–∏–±—ã–ª—å"].sum(),
                "–î–æ—Ö–æ–¥ –õ—ë–Ω–∏": df["–î–æ—Ö–æ–¥ –õ—ë–Ω–∏"].sum()
            }])

            df = pd.concat([df, totals], ignore_index=True)

            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                df.to_excel(writer, index=False, sheet_name='–û—Ç—á–µ—Ç')

                workbook = writer.book
                worksheet = writer.sheets['–û—Ç—á–µ—Ç']

                num_format = workbook.add_format({'num_format': '#,##0.00‚ÇΩ'})
                date_format = workbook.add_format({'num_format': 'dd.mm.yyyy'})

                worksheet.set_column('A:A', 12, date_format)
                worksheet.set_column('B:E', 15, num_format)

                totals_format = workbook.add_format({
                    'bold': True,
                    'bg_color': '#FFFF00',
                    'num_format': '#,##0.00‚ÇΩ'
                })

                last_row = len(df)
                for col in range(4):
                    worksheet.write(last_row, col + 1, df.iloc[-1, col + 1], totals_format)

            output.seek(0)

            await message.answer_document(
                types.BufferedInputFile(output.read(), filename="month_report.xlsx"),
                caption=f"üìä –û—Ç—á–µ—Ç –∑–∞ {today.strftime('%B %Y')}"
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")



@dp.callback_query(F.data == "enter_customer_name")
async def request_customer_name(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∏–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"""
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:")
    await state.set_state(RecordSaleState.enter_customer_name)


@dp.message(RecordSaleState.enter_customer_name)
async def enter_customer_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è"""
    customer_name = message.text.strip()

    if not customer_name:
        await message.answer("‚ùå –ò–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º! –í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–Ω–æ–≤–∞:")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(customer_name=customer_name)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é –ø—Ä–æ–¥–∞–∂–∏
    await save_sale(message, state)

@dp.callback_query(F.data == "skip_customer_name")
async def skip_customer_name(callback: types.CallbackQuery, state: FSMContext):
    """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '–ù–µ—Ç' –ø—Ä–∏ –≤–≤–æ–¥–µ –∏–º–µ–Ω–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è ‚Äì —Å–æ–∑–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–º—è."""
    with Session() as session:
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        last_customer = session.query(Customer).order_by(Customer.id.desc()).first()
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –∏–º—è
        next_customer_id = (last_customer.id + 1) if last_customer else 1
        customer_name = f"–ü–æ–∫—É–ø–∞—Ç–µ–ª—å {next_customer_id}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(customer_name=customer_name)

    # –ü–µ—Ä–µ–¥–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è –≤ save_sale
    await save_sale(callback.message, state)


@dp.message(F.text == "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
async def show_analytics(message: types.Message):
    markup = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
             types.KeyboardButton(text="üìú –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏")],
            [types.KeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü"),
             types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer("üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:", reply_markup=markup)

@dp.message(F.text == "üìú –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏")
async def show_customers(message: types.Message):
    """–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∑–∞ –º–µ—Å—è—Ü"""
    try:
        with Session() as session:
            today = datetime.datetime.now().date()

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            customers_today = session.query(Customer).filter(
                func.DATE(Customer.date) == today
            ).order_by(Customer.id.desc()).all()

            if not customers_today:
                await message.answer("üì≠ –ù–µ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è.")
            else:
                response = ["üë§ <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>"]
                for customer in customers_today:
                    sales = session.query(Sale).filter(
                        Sale.customer_id == customer.id,
                        func.DATE(Sale.date) == today
                    ).all()

                    sales_text = "\n".join(
                        f"üì¶ {s.product.name} - {s.flavor.name} - {s.quantity} —à—Ç."
                        for s in sales
                    )

                    response.append(
                        f"üë§ <b>{customer.name}</b>\n"
                        f"{sales_text}\n"
                        f"‚Äî ‚Äî ‚Äî ‚Äî ‚Äî"
                    )

                await message.answer("\n".join(response), parse_mode="HTML")

            # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∑–∞ –º–µ—Å—è—Ü
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∑–∞ –º–µ—Å—è—Ü", callback_data="download_customers_month")]
            ])
            await message.answer("–•–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü?", reply_markup=markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è—Ö.")

        


@dp.callback_query(F.data == "download_customers_month")
async def download_customers_month(callback: types.CallbackQuery):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"""
    try:
        with Session() as session:
            today = datetime.datetime.now().date()
            first_day_of_month = datetime.date(today.year, today.month, 1)
            last_day_of_month = datetime.date(
                today.year + (today.month // 12),
                (today.month % 12) + 1, 1
            ) - datetime.timedelta(days=1)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            customers = session.query(Customer).filter(
                Customer.date >= first_day_of_month,
                Customer.date <= last_day_of_month
            ).order_by(Customer.date).all()

            if not customers:
                await callback.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è—Ö –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.", show_alert=True)
                return

            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
            data = []
            for customer in customers:
                sales = session.query(Sale).filter(Sale.customer_id == customer.id).all()
                for sale in sales:
                    data.append({
                        "–î–∞—Ç–∞": customer.date.strftime("%d.%m.%Y"),
                        "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å": customer.name,
                        "–¢–æ–≤–∞—Ä": sale.product.name,
                        "–í–∫—É—Å": sale.flavor.name,
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": sale.quantity,
                        "–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏": sale.sale_price,
                        "–í—ã—Ä—É—á–∫–∞": sale.quantity * sale.sale_price
                    })

            df = pd.DataFrame(data)

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel-—Ñ–∞–π–ª–∞
            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                df.to_excel(writer, index=False, sheet_name='–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏')

                workbook = writer.book
                worksheet = writer.sheets['–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏']

                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫
                worksheet.set_column('A:A', 12)  # –î–∞—Ç–∞
                worksheet.set_column('B:B', 25)  # –ü–æ–∫—É–ø–∞—Ç–µ–ª—å
                worksheet.set_column('C:C', 20)  # –¢–æ–≤–∞—Ä
                worksheet.set_column('D:D', 20)  # –í–∫—É—Å
                worksheet.set_column('E:E', 12)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
                worksheet.set_column('F:F', 15)  # –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏
                worksheet.set_column('G:G', 15)  # –í—ã—Ä—É—á–∫–∞

            output.seek(0)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await callback.message.answer_document(
                types.BufferedInputFile(output.read(), filename="customers_month.xlsx"),
                caption=f"üìä –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ –∑–∞ {today.strftime('%B %Y')}"
            )
            await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã.", show_alert=True)

@dp.callback_query(F.data == "quantity_other", RecordSaleState.enter_quantity)
async def select_other_quantity(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ '–î—Ä—É–≥–æ–µ' –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç–æ–≤–∞—Ä–∞"""
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä—É—á–Ω—É—é:")
    await state.set_state(RecordSaleState.enter_custom_quantity)  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞

@dp.message(RecordSaleState.enter_custom_quantity)
async def enter_custom_quantity(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    try:
        quantity = int(message.text)  # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–æ–¥ –≤ —á–∏—Å–ª–æ
        if quantity <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0! –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        if "product_id" not in data or "flavor_id" not in data:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
            await state.clear()
            return

        with Session() as session:
            flavor = session.query(Flavor).get(data["flavor_id"])
            if not flavor:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –≤–∫—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                await state.clear()
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
            if flavor.quantity < quantity:
                await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞! –û—Å—Ç–∞–ª–æ—Å—å: {flavor.quantity}")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            if "sales_list" not in data:
                data["sales_list"] = []

            product = session.query(Product).get(data["product_id"])
            data["sales_list"].append({
                "product_name": product.name,
                "flavor_name": flavor.name,
                "quantity": quantity
            })

            await state.update_data(sales_list=data["sales_list"])

            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –¥–æ–±–∞–≤–∏—Ç—å –ª–∏ –µ—â–µ —Ç–æ–≤–∞—Ä
            markup = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ç–æ–≤–∞—Ä", callback_data="add_more")],
                [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É", callback_data="finish_sale")]
            ])

            await message.answer(
                f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–æ: {quantity} —à—Ç.\n"
                f"‚ûï –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä?",
                reply_markup=markup
            )

            await state.set_state(RecordSaleState.confirm_more_items)

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.callback_query(F.data == "change_quantity")
async def change_quantity(callback: types.CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å–ª–µ –æ—Ç–∫–∞–∑–∞ –æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    data = await state.get_data()

    with Session() as session:
        flavor = session.get(Flavor, data['flavor_id'])

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–º–∞–∫—Å 10)
        max_quantity = min(flavor.quantity, 10)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ 2 —Ä—è–¥–∞ (1‚Äì5, 6‚Äì10)
        quantity_buttons = [
            [InlineKeyboardButton(text=str(i), callback_data=f"quantity_{i}") for i in
             range(1, min(6, max_quantity + 1))],
            [InlineKeyboardButton(text=str(i), callback_data=f"quantity_{i}") for i in
             range(6, max_quantity + 1)]
        ]

        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å—à–µ 10, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î—Ä—É–≥–æ–µ"
        if flavor.quantity > 10:
            quantity_buttons.append(
                [InlineKeyboardButton(text="üî¢ –î—Ä—É–≥–æ–µ", callback_data="quantity_other")])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        quantity_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_flavors")])

        markup = InlineKeyboardMarkup(inline_keyboard=quantity_buttons)

        await callback.message.edit_text("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:", reply_markup=markup)
        await state.set_state(RecordSaleState.confirm_more_items)

@dp.callback_query(F.data == "channel_all")
async def channel_all_products(callback: types.CallbackQuery):
    session = Session()
    try:
        products = session.query(Product).order_by(Product.name).all()
        if not products:
            await callback.message.edit_text("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return

        lines = []
        for product in products:
            product_line = f"‚Ä¢ {product.name} {int(product.sale_price)}"
            lines.append(product_line)
            for flavor in product.flavors:
                if flavor.quantity == 0:
                    line = f"<blockquote>- <s>{flavor.name}</s></blockquote>"
                else:
                    line = f"<blockquote>- {flavor.name}</blockquote>"
                lines.append(line)
            lines.append("")
        text = "\n".join(lines)
        # –ö–Ω–æ–ø–∫–∞ "üîô –ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∞–π—Å–∞
        markup = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_actual_price")]
        ])
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=markup)
        await callback.answer("–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å –æ–±–Ω–æ–≤–ª—ë–Ω: –≤–µ—Å—å –ø—Ä–∞–π—Å.")
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        session.close()


@dp.callback_query(F.data.startswith("channel_prod_"))
async def channel_product_details(callback: types.CallbackQuery):
    prod_id = int(callback.data.split("_")[-1])
    session = Session()
    try:
        product = session.query(Product).get(prod_id)
        if not product:
            await callback.message.edit_text("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        lines = [f"‚Ä¢ {product.name} {int(product.sale_price)}"]
        for flavor in product.flavors:
            if flavor.quantity == 0:
                line = f"<blockquote>- <s>{flavor.name}</s></blockquote>"
            else:
                line = f"<blockquote>- {flavor.name}</blockquote>"
            lines.append(line)

        # –ò–∑–º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–æ–≤–∞—Ä–∞
        markup = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="channel_select")]
        ])

        await callback.message.edit_text("\n".join(lines), parse_mode="HTML", reply_markup=markup)
        await callback.answer("–ü—Ä–∞–π—Å —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    except Exception as e:
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        session.close()



@dp.message(F.text == "üì¶ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã")
async def show_products_menu(message: types.Message):
    with Session() as session:
        products = session.query(Product).all()

        if not products:
            await message.answer("üì≠ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ")
            return

        for product in products:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥ —Å 1 —à—Ç—É–∫–∏
            profit_per_unit = int(product.sale_price - product.purchase_price)

            # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ (–ø–æ –≤—Å–µ–º –≤–∫—É—Å–∞–º)
            total_quantity = sum(flavor.quantity for flavor in product.flavors)

            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –≤–∫—É—Å–æ–≤
            def shorten_text(text, max_length=28):
                return text if len(text) <= max_length else text[:max_length - 3] + "..."

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤–∫—É—Å–æ–≤
            flavors_info = [
                f"<blockquote>{'<s>' if flavor.quantity == 0 else ''}{shorten_text(flavor.name)} - {flavor.quantity} —à—Ç "
                f"{'üü¢' if flavor.quantity > 1 else 'üü°' if flavor.quantity == 1 else 'üî¥'}{'</s>' if flavor.quantity == 0 else ''}</blockquote>"
                for flavor in product.flavors
            ]

            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ü–µ–Ω—ã –ø–æ –∞–∫—Ü–∏–∏
            product_text = [
                "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ",
                f"üìå <b><u>{product.name.upper()}</u></b> | {total_quantity} —à—Ç",
                f"–ó–∞–∫—É–ø: {int(product.purchase_price)}‚ÇΩ",
                f"–ü—Ä–æ–¥–∞–∂–∞: {int(product.sale_price)}‚ÇΩ",
                f"–ê–∫—Ü–∏—è (–æ—Ç 2 —à—Ç): {int(product.sale_price_2)}‚ÇΩ",
                f"–î–æ—Ö–æ–¥ —Å 1 —à—Ç: {profit_per_unit}‚ÇΩ",
                "",
                "üçè <b>–í–∫—É—Å—ã:</b>"
            ] + flavors_info + ["- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - "]

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer("\n".join(product_text), parse_mode="HTML")

    # –ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π ‚Äì –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª"
    markup = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É"),
             types.KeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É")],
            [types.KeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª")],
            [types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer("üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–∞–±–ª–∏—Ü–µ–π:</b>", reply_markup=markup)




@dp.message(F.text == "–û–±–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª")
async def update_channel_menu(message: types.Message):
    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤", callback_data="channel_all")],
        [types.InlineKeyboardButton(text="–í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤–∫—É—Å–æ–≤", callback_data="channel_select")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞:", reply_markup=markup)



@dp.callback_query(F.data == "channel_all")
async def channel_all_products(callback: types.CallbackQuery):
    session = Session()
    try:
        products = session.query(Product).order_by(Product.name).all()
        if not products:
            await callback.message.edit_text("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return

        lines = []
        for product in products:
            # –í—ã–≤–æ–¥ —Ç–æ–≤–∞—Ä–∞: "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –¶–µ–Ω–∞"
            product_line = f"‚Ä¢ {product.name} {int(product.sale_price)}"
            lines.append(product_line)
            # –ü–µ—Ä–µ–±–æ—Ä –≤–∫—É—Å–æ–≤
            for flavor in product.flavors:
                if flavor.quantity == 0:
                    line = f"- <s>{flavor.name}</s> üî¥"
                elif flavor.quantity == 1:
                    line = f"- {flavor.name} üü°"
                else:
                    line = f"- {flavor.name} üü¢"
                lines.append(line)
            lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏

        text = "\n".join(lines)
        await callback.message.edit_text(text, parse_mode="HTML")
        await callback.answer("–ö–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª—ë–Ω: —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        session.close()


@dp.callback_query(F.data == "channel_select")
async def channel_select_product(callback: types.CallbackQuery):
    session = Session()
    try:
        products = session.query(Product).order_by(Product.name).all()
        if not products:
            await callback.message.edit_text("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.")
            return

        buttons = []
        for product in products:
            buttons.append([types.InlineKeyboardButton(text=product.name, callback_data=f"channel_prod_{product.id}")])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∞–π—Å–∞
        buttons.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_actual_price")])

        markup = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=markup)
        await callback.answer()
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        session.close()

@dp.callback_query(F.data == "back_to_actual_price")
async def back_to_actual_price(callback: types.CallbackQuery):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∞–π—Å–∞
    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–í–µ—Å—å –ø—Ä–∞–π—Å", callback_data="channel_all")],
        [types.InlineKeyboardButton(text="–ü—Ä–∞–π—Å —Ç–æ–≤–∞—Ä–∞", callback_data="channel_select")],
        [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")]
    ])
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∞–π—Å–∞:", reply_markup=markup)
    await callback.answer()



@dp.callback_query(F.data.startswith("channel_prod_"))
async def channel_product_details(callback: types.CallbackQuery):
    prod_id = int(callback.data.split("_")[-1])
    session = Session()
    try:
        product = session.query(Product).get(prod_id)
        if not product:
            await callback.message.edit_text("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        lines = [f"‚Ä¢ {product.name} {int(product.sale_price)}"]
        for flavor in product.flavors:
            if flavor.quantity == 0:
                line = f"- <s>{flavor.name}</s> üî¥"
            elif flavor.quantity == 1:
                line = f"- {flavor.name} üü°"
            else:
                line = f"- {flavor.name} üü¢"
            lines.append(line)
        text = "\n".join(lines)
        await callback.message.edit_text(text, parse_mode="HTML")
        await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    except Exception as e:
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        session.close()







@dp.callback_query(F.data == "cancel_sale")
async def cancel_sale(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏"""
    await state.clear()
    await callback.message.edit_text("üö´ –ó–∞–ø–∏—Å—å –ø—Ä–æ–¥–∞–∂–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")



def is_navigation_command(text: str) -> bool:
    """–§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª"""
    return text in ["üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", "üíµ –ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–∂—É", "üì¶ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "üîô –ù–∞–∑–∞–¥"]

async def check_navigation(message: types.Message, state: FSMContext):
    """–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True"""
    if is_navigation_command(message.text):
        await state.clear()  # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await cmd_start(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        return True
    return False

@dp.message(Command("start", "help"))
async def cmd_start(message: types.Message):
    markup = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏"),
             types.KeyboardButton(text="üíµ –ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–∂—É")],
            [types.KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏"),
             types.KeyboardButton(text="üì¶ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã")],
            [types.KeyboardButton(text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"),
             types.KeyboardButton(text="–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å")],
            [types.KeyboardButton(text="–ë—Ä–∞–∫")]
        ],
        resize_keyboard=True
    )
    await message.answer("üè™ <b>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)



@dp.message(lambda message: message.text == "–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–∞–π—Å")
async def actual_price_menu(message: types.Message):
    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–í–µ—Å—å –ø—Ä–∞–π—Å", callback_data="channel_all")],
        [types.InlineKeyboardButton(text="–ü—Ä–∞–π—Å —Ç–æ–≤–∞—Ä–∞", callback_data="channel_select")],
        [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∞–π—Å–∞:", reply_markup=markup)

@dp.callback_query(F.data == "back_to_product_selection")
async def back_to_product_selection(callback: types.CallbackQuery, state: FSMContext):
    session = Session()
    try:
        products = session.query(Product).order_by(Product.name).all()
        if not products:
            await callback.message.edit_text("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.")
            return

        buttons = []
        for product in products:
            buttons.append([types.InlineKeyboardButton(text=product.name, callback_data=f"channel_prod_{product.id}")])
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "üîô –ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∞–π—Å–∞
        buttons.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_actual_price")])
        markup = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=markup)
        await callback.answer()
    except Exception as e:
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        session.close()



@dp.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu_callback(callback: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ inline-—Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.delete()
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await cmd_start(callback.message)



@dp.message(AddProductState.enter_name)
async def enter_product_name(message: types.Message, state: FSMContext):
    if await check_navigation(message, state):
        return

    name = message.text.strip()

    if not name:
        await message.answer("‚ùå –ò–º—è —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å–Ω–æ–≤–∞:")
        return

    with Session() as session:
        existing_product = session.query(Product).filter_by(name=name).first()
        if existing_product:
            await message.answer("‚ùå –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
            return  # –ù–µ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –¥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ—Å—Ç–∏

    await state.update_data(name=name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n–§–æ—Ä–º–∞—Ç: <b>–ó–∞–∫—É–ø–æ—á–Ω–∞—è –ü—Ä–æ–¥–∞–∂–Ω–∞—è –ê–∫—Ü–∏—è</b>\n–ü—Ä–∏–º–µ—Ä: 100 200 150")
    await state.set_state(AddProductState.enter_prices)

@dp.message(AddProductState.enter_prices)
async def enter_product_prices(message: types.Message, state: FSMContext):
    if message.text.lower() in ["–æ—Ç–º–µ–Ω–∞", "/cancel"]:
        await state.clear()
        await cmd_start(message)
        return

    try:
        # –ü–∞—Ä—Å–∏–º 3 –∑–Ω–∞—á–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ 2
        purchase_price, sale_price, sale_price_2 = map(float, message.text.split())
        await state.update_data(
            purchase_price=purchase_price,
            sale_price=sale_price,
            sale_price_2=sale_price_2
        )
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∫—É—Å—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):\n–ü—Ä–∏–º–µ—Ä:\n–Ø–±–ª–æ–∫–æ 10\n–ë–∞–Ω–∞–Ω 5",
                            reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(AddProductState.enter_flavors)
    except:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ó–∞–∫—É–ø–æ—á–Ω–∞—è –ü—Ä–æ–¥–∞–∂–∞_1—à—Ç –ü—Ä–æ–¥–∞–∂–∞_2—à—Ç\n–ü—Ä–∏–º–µ—Ä: 100 200 150")
        await state.set_state(AddProductState.enter_prices)



# ======================= –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê–ú–ò ======================= #
async def confirm_sale(message, quantity, state):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏"""
    data = await state.get_data()

    with Session() as session:
        flavor = session.get(Flavor, data['flavor_id'])
        product = session.get(Product, data['product_id'])

        if flavor.quantity < quantity:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞! –û—Å—Ç–∞–ª–æ—Å—å: {flavor.quantity}")
            return

        await state.update_data(quantity=quantity)

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm_buttons = [
            [InlineKeyboardButton(text="‚úÖ –î–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_sale")],
            [InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="change_quantity")],
            [InlineKeyboardButton(text="üîô –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data="cancel_sale")]
        ]
        markup = InlineKeyboardMarkup(inline_keyboard=confirm_buttons)

        await message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n"
            f"üì¶ <b>–¢–æ–≤–∞—Ä:</b> {product.name}\n"
            f"üçè <b>–í–∫—É—Å:</b> {flavor.name}\n"
            f"üì¶ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity} —à—Ç.\n\n"
            f"–í—Å–µ –≤–µ—Ä–Ω–æ?",
            reply_markup=markup,
            parse_mode="HTML"
        )



@dp.callback_query(F.data == "cancel_delete", EditProductState.confirm_delete)
async def cancel_delete_product(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    product_id = data['product_id']

    with Session() as session:
        product = session.get(Product, product_id)
        if product:
            markup = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—ã", callback_data="edit_prices"),
                 types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∫—É—Å—ã", callback_data="add_flavors")],
                [types.InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –≤–∫—É—Å—ã", callback_data="remove_flavors"),
                 types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="delete_product")],
                [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_products")]
            ])
            await callback.message.edit_text(
                f"‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –¢–æ–≤–∞—Ä: {product.name}",
                reply_markup=markup
            )
            await state.set_state(EditProductState.select_action)
        else:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            await state.clear()
            await cmd_start(callback.message)


@dp.callback_query(F.data == "back_to_products_list", EditSaleState.select_flavor)
async def back_to_products_list(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤"""
    await start_sale_editing(callback, state)

@dp.message(F.text == "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏")
async def products_menu(message: types.Message):
    markup = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä"),
             types.KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä")],
            [types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer("üì¶ <b>–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏</b>", reply_markup=markup)


@dp.callback_query(F.data == "channel_all")
async def channel_all_products(callback: types.CallbackQuery):
    session = Session()
    try:
        products = session.query(Product).order_by(Product.name).all()
        if not products:
            await callback.message.edit_text("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return

        lines = []
        for product in products:
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–≤–∞—Ä –∫–∞–∫ "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –¶–µ–Ω–∞"
            product_line = f"‚Ä¢ {product.name} {int(product.sale_price)}"
            lines.append(product_line)
            # –ü–µ—Ä–µ–±–æ—Ä –≤–∫—É—Å–æ–≤: –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–≤–Ω–æ 0 ‚Äì –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ <s>...</s>,
            # –∏–Ω–∞—á–µ –≤—ã–≤–æ–¥–∏–º –ø—Ä–æ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ.
            for flavor in product.flavors:
                if flavor.quantity == 0:
                    line = f"- <s>{flavor.name}</s>"
                else:
                    line = f"- {flavor.name}"
                lines.append(line)
            lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏

        text = "\n".join(lines)
        await callback.message.edit_text(text, parse_mode="HTML")
        await callback.answer("–ö–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª—ë–Ω: —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤.")
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        session.close()


@dp.callback_query(F.data.startswith("channel_prod_"))
async def channel_product_details(callback: types.CallbackQuery):
    prod_id = int(callback.data.split("_")[-1])
    session = Session()
    try:
        product = session.query(Product).get(prod_id)
        if not product:
            await callback.message.edit_text("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        lines = [f"‚Ä¢ {product.name} {int(product.sale_price)}"]
        for flavor in product.flavors:
            if flavor.quantity == 0:
                line = f"- <s>{flavor.name}</s>"
            else:
                line = f"- {flavor.name}"
            lines.append(line)
        text = "\n".join(lines)
        await callback.message.edit_text(text, parse_mode="HTML")
        await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    except Exception as e:
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        session.close()



@dp.message(F.text == "üì¶ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã")
async def show_products_menu(message: types.Message):
    with Session() as session:
        products = session.query(Product).all()

        if not products:
            await message.answer("üì≠ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ")
            return

        for product in products:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥ —Å 1 —à—Ç—É–∫–∏
            profit_per_unit = int(product.sale_price - product.purchase_price)

            # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ (–ø–æ –≤—Å–µ–º –≤–∫—É—Å–∞–º)
            total_quantity = sum(flavor.quantity for flavor in product.flavors)

            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –≤–∫—É—Å–æ–≤
            def shorten_text(text, max_length=28):
                return text if len(text) <= max_length else text[:max_length - 3] + "..."

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤–∫—É—Å–æ–≤
            flavors_info = [
                f"<blockquote>{'<s>' if flavor.quantity == 0 else ''}{shorten_text(flavor.name)} - {flavor.quantity} —à—Ç "
                f"{'üü¢' if flavor.quantity > 1 else 'üü°' if flavor.quantity == 1 else 'üî¥'}{'</s>' if flavor.quantity == 0 else ''}</blockquote>"
                for flavor in product.flavors
            ]

            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–∞
            product_text = [
                "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ",
                f"üìå <b><u>{product.name.upper()}</u></b> | {total_quantity} —à—Ç",  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∂–∏—Ä–Ω—ã–π –∏ –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π
                f"–ó–∞–∫—É–ø: {int(product.purchase_price)}‚ÇΩ",
                f"–ü—Ä–æ–¥–∞–∂–∞: {int(product.sale_price)}‚ÇΩ",
                f"–î–æ—Ö–æ–¥ —Å 1 —à—Ç: {profit_per_unit}‚ÇΩ",
                "",
                "üçè <b>–í–∫—É—Å—ã:</b>"
            ] + flavors_info + ["- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - "]

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer("\n".join(product_text), parse_mode="HTML")

    # –ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
    markup = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É"),
             types.KeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É")],
            [types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer("üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–∞–±–ª–∏—Ü–µ–π:</b>", reply_markup=markup)






@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message):
    await cmd_start(message)

@dp.message(F.text == "üÜï –°–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä")
async def start_adding_product(message: types.Message, state: FSMContext):
    await state.set_state(AddProductState.enter_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=types.ReplyKeyboardRemove())


@dp.message(AddProductState.enter_name)
async def enter_product_name(message: types.Message, state: FSMContext):
    if message.text in ["üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", "üíµ –ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–∂—É", "üì¶ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "üîô –ù–∞–∑–∞–¥"]:
        await state.clear()
        await cmd_start(message)
        return


    name = message.text.strip()
    if not name:
        await message.answer("‚ùå –ò–º—è —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return
    await state.update_data(name=name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n–§–æ—Ä–º–∞—Ç: <b>–ó–∞–∫—É–ø–æ—á–Ω–∞—è –ü—Ä–æ–¥–∞–∂–Ω–∞—è –ê–∫—Ü–∏—è</b>\n–ü—Ä–∏–º–µ—Ä: 100 200 150")
    await state.set_state(AddProductState.enter_prices)


@dp.message(AddProductState.enter_prices)
async def enter_product_prices(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏–ª–∏ "–ù–∞–∑–∞–¥"
    if message.text in ["üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", "üíµ –ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–∂—É", "üì¶ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "üîô –ù–∞–∑–∞–¥"]:
        await state.clear()  # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await cmd_start(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        return

    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    try:
        purchase_price, sale_price = map(float, message.text.split())
        await state.update_data(purchase_price=purchase_price, sale_price=sale_price)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∫—É—Å—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):\n–ü—Ä–∏–º–µ—Ä:\n–Ø–±–ª–æ–∫–æ 10\n–ë–∞–Ω–∞–Ω 5")
        await state.set_state(AddProductState.enter_flavors)
    except:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<b>–ó–∞–∫—É–ø–æ—á–Ω–∞—è –ü—Ä–æ–¥–∞–∂–Ω–∞—è –ê–∫—Ü–∏—è</b>\n–ü—Ä–∏–º–µ—Ä: 100 200 150")
        await state.set_state(AddProductState.enter_prices)


@dp.message(AddProductState.enter_flavors)
async def enter_product_flavors(message: types.Message, state: FSMContext):
    if await check_navigation(message, state):
        return

    data = await state.get_data()
    with Session() as session:
        product = session.query(Product).filter_by(name=data['name']).first()
        if not product:
            product = Product(
                name=data['name'],
                purchase_price=data['purchase_price'],
                sale_price=data['sale_price'],
                sale_price_2=data['sale_price_2']
            )
            session.add(product)
            session.commit()

        dup_list = []   # –°–ø–∏—Å–æ–∫ –¥–ª—è –≤–∫—É—Å–æ–≤-–¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        new_list = []   # –°–ø–∏—Å–æ–∫ –¥–ª—è –Ω–æ–≤—ã—Ö –≤–∫—É—Å–æ–≤
        errors = []

        for line in message.text.splitlines():
            line = line.strip()
            if not line:
                continue
            try:
                flavor_name, qty = parse_flavor_line(line)
                norm_name = flavor_name.lower().strip()
                existing = session.query(Flavor).filter(
                    Flavor.product_id == product.id,
                    func.lower(func.trim(Flavor.name)) == norm_name
                ).first()
                if existing:
                    dup_list.append({"id": existing.id, "name": flavor_name, "quantity": qty})
                else:
                    new_list.append({"name": flavor_name, "quantity": qty})
            except ValueError as e:
                errors.append(str(e))

        if errors:
            await message.answer("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏:\n" + "\n".join(errors[:5]) +
                                 "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–∫—É—Å–æ–≤ —Å–Ω–æ–≤–∞:")
            return

        if dup_list:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥—É–±–ª–∏–∫–∞—Ç–∞—Ö –∏ –Ω–æ–≤—ã—Ö –≤–∫—É—Å–∞—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(duplicate_flavors=dup_list, new_flavors=new_list, product_id=product.id)
            dup_names = ", ".join([dup["name"] for dup in dup_list])
            markup = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="–î–∞", callback_data="sum_duplicates_yes"),
                 types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="sum_duplicates_no")]
            ])
            await message.answer(f"–í–∫—É—Å—ã {dup_names} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç. –°—É–º–º–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞?", reply_markup=markup)
            return
        else:
            if new_list:
                for nf in new_list:
                    new_flavor = Flavor(name=nf["name"], quantity=nf["quantity"], product=product)
                    session.add(new_flavor)
                session.commit()
                await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä <b>{product.name}</b> –¥–æ–±–∞–≤–ª–µ–Ω!\n–ù–æ–≤—ã—Ö –≤–∫—É—Å–æ–≤: {len(new_list)}")
                await state.clear()
                await cmd_start(message)
            else:
                await message.answer("‚ùå –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∫—É—Å–∞! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥:")

@dp.callback_query(F.data == "sum_duplicates_yes")
async def sum_duplicates_yes(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    dup_list = data.get("duplicate_flavors", [])
    new_list = data.get("new_flavors", [])
    product_id = data.get("product_id")
    with Session() as session:
        product = session.get(Product, product_id)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        for dup in dup_list:
            flavor = session.get(Flavor, dup["id"])
            if flavor:
                flavor.quantity += dup["quantity"]
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –≤–∫—É—Å—ã
        for nf in new_list:
            new_flavor = Flavor(name=nf["name"], quantity=nf["quantity"], product=product)
            session.add(new_flavor)
        session.commit()
        await callback.message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä <b>{product.name}</b> –æ–±–Ω–æ–≤–ª—ë–Ω!\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–æ, –Ω–æ–≤—ã—Ö –≤–∫—É—Å–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {len(new_list)}"
        )
    await state.clear()
    await cmd_start(callback.message)

@dp.callback_query(F.data == "sum_duplicates_no")
async def sum_duplicates_no(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∫—É—Å—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–Ω–æ–≤–æ:")
    await state.clear()


# –ö–æ–º–∞–Ω–¥–∞ "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä"
@dp.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä")
async def start_editing_product(message: types.Message, state: FSMContext):
    with Session() as session:
        products = session.query(Product).filter(Product.name.isnot(None)).all()

        if not products:
            await message.answer("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        buttons = []
        for product in products:
            buttons.append([types.InlineKeyboardButton(
                text=product.name,
                callback_data=f"edit_{product.id}"
            )])

        markup = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)
        await state.set_state(EditProductState.select_product)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
@dp.callback_query(F.data.startswith("edit_"), EditProductState.select_product)
async def select_product_to_edit(callback: types.CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split("_")[1])
    await state.update_data(product_id=product_id)

    with Session() as session:
        product = session.get(Product, product_id)
        product_info = f"üìå <b>{product.name.upper()}</b>\n"
        product_info += f"–ó–∞–∫—É–ø: {int(product.purchase_price)}‚ÇΩ\n"
        product_info += f"–ü—Ä–æ–¥–∞–∂–∞: {int(product.sale_price)}‚ÇΩ\n"
        product_info += f"–ê–∫—Ü–∏—è (–æ—Ç 2 —à—Ç): {int(product.sale_price_2)}‚ÇΩ\n"
        product_info += "–û—Å—Ç–∞—Ç–∫–∏ –ø–æ –≤–∫—É—Å–∞–º:\n"
        for flavor in product.flavors:
            product_info += f" - {flavor.name}: {flavor.quantity} —à—Ç.\n"

    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—ã", callback_data="edit_prices"),
         types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∫—É—Å—ã", callback_data="add_flavors")],
        [types.InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –≤–∫—É—Å—ã", callback_data="remove_flavors"),
         types.InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="edit_flavor_quantity")],
        [types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="delete_product")],
        [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_products")]
    ])

    full_text = product_info + "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await callback.message.edit_text(full_text, reply_markup=markup, parse_mode="HTML")
    await state.set_state(EditProductState.select_action)



@dp.callback_query(F.data == "edit_flavor_quantity", EditProductState.select_action)
async def select_flavor_for_editing(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –≤–∫—É—Å–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å"""
    data = await state.get_data()
    product_id = data.get("product_id")

    with Session() as session:
        product = session.get(Product, product_id)
        if not product or not product.flavors:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –∏–ª–∏ –≤–∫—É—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≤–∫—É—Å–æ–≤
        flavor_buttons = [
            [types.InlineKeyboardButton(text=f"{flavor.name} ({flavor.quantity})", callback_data=f"edit_quantity_{flavor.id}")]
            for flavor in product.flavors
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        flavor_buttons.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_edit_product")])

        markup = types.InlineKeyboardMarkup(inline_keyboard=flavor_buttons)

        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:", reply_markup=markup)
        await state.set_state(EditProductState.select_action)


@dp.callback_query(F.data.startswith("edit_quantity_"), EditProductState.select_action)
async def request_new_quantity(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    flavor_id = int(callback.data.split("_")[2])
    await state.update_data(flavor_id=flavor_id)

    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∫—É—Å–∞:")
    await state.set_state(EditProductState.update_flavor_quantity)


@dp.message(EditProductState.update_flavor_quantity)
async def update_flavor_quantity(message: types.Message, state: FSMContext):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∫—É—Å–∞ –≤ –±–∞–∑–µ"""
    try:
        new_quantity = int(message.text)
        if new_quantity < 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return

        data = await state.get_data()
        flavor_id = data.get("flavor_id")

        with Session() as session:
            flavor = session.get(Flavor, flavor_id)
            if not flavor:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –≤–∫—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            flavor.quantity = new_quantity
            session.commit()

            # ‚ùóÔ∏è –¢–µ–ø–µ—Ä—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –ë–î
            session.refresh(flavor)

            await message.answer(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è {flavor.name} –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {new_quantity} —à—Ç.")
            await state.clear()

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@dp.callback_query(F.data == "back_to_edit_product", EditProductState.select_flavor)
async def back_to_edit_product(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –≤—ã–±–æ—Ä—É —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    data = await state.get_data()
    product_id = data.get("product_id")

    if not product_id:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ —É—Ç–µ—Ä—è–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    with Session() as session:
        product = session.query(Product).get(product_id)

        if not product:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.clear()
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        markup = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—ã", callback_data="edit_prices"),
             types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∫—É—Å—ã", callback_data="add_flavors")],
            [types.InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –≤–∫—É—Å—ã", callback_data="remove_flavors"),
             types.InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∫—É—Å–∞", callback_data="edit_flavor_quantity")],
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_products")]
        ])

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ <b>{product.name}</b>:",
                                         reply_markup=markup, parse_mode="HTML")
        await state.set_state(EditProductState.select_action)









@dp.callback_query(F.data == "delete_product", EditProductState.select_action)
async def delete_product_handler(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    product_id = data.get('product_id')

    with Session() as session:
        product = session.get(Product, product_id)
        if product:
            markup = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_delete_{product_id}")],
                [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")]
            ])
            await callback.message.edit_text(
                f"‚ùó –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä <b>{product.name}</b>?",
                reply_markup=markup
            )
            await state.set_state(EditProductState.confirm_delete)
        else:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            await state.clear()
            await cmd_start(callback.message)



@dp.callback_query(EditProductState.select_action)
async def handle_edit_action(callback: types.CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∏–ª–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if callback.data in ["üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", "üíµ –ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–∂—É", "üì¶ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "üîô –ù–∞–∑–∞–¥"]:
        await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await cmd_start(callback.message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        return

    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    action = callback.data
    data = await state.get_data()

    if action == "edit_prices":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n–§–æ—Ä–º–∞—Ç: <b>–ó–∞–∫—É–ø–æ—á–Ω–∞—è –ü—Ä–æ–¥–∞–∂–Ω–∞—è</b>")
        await state.set_state(EditProductState.update_prices)

    elif action == "add_flavors":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –≤–∫—É—Å—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):")
        await state.set_state(EditProductState.add_flavors)

    elif action == "remove_flavors":
        with Session() as session:
            product = session.query(Product).get(data['product_id'])
            markup = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text=f.name, callback_data=f"remove_{f.id}")]
                for f in product.flavors
            ])
            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
            await state.set_state(EditProductState.remove_flavors)


@dp.message(EditProductState.update_prices)
async def update_prices(message: types.Message, state: FSMContext):
    try:
        # –û–∂–∏–¥–∞–µ–º 3 –∑–Ω–∞—á–µ–Ω–∏—è
        purchase_price, sale_price, sale_price_2 = map(float, message.text.split())
        data = await state.get_data()

        with Session() as session:
            product = session.query(Product).get(data['product_id'])
            product.purchase_price = purchase_price
            product.sale_price = sale_price
            product.sale_price_2 = sale_price_2  # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ
            session.commit()

        await message.answer("‚úÖ –¶–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        await state.clear()
    except:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ó–∞–∫—É–ø–æ—á–Ω–∞—è –ü—Ä–æ–¥–∞–∂–∞_1—à—Ç –ü—Ä–æ–¥–∞–∂–∞_2—à—Ç\n–ü—Ä–∏–º–µ—Ä: 100 200 150")
        return


@dp.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete_product(callback: types.CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split("_")[-1])

    with Session() as session:
        product = session.get(Product, product_id)
        if product:
            session.delete(product)
            session.commit()
            await callback.message.edit_text(f"‚úÖ –¢–æ–≤–∞—Ä <b>{product.name}</b> —É–¥–∞–ª–µ–Ω!")
            await state.clear()
            await cmd_start(callback.message)
        else:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)

            @dp.callback_query(F.data == "cancel_delete", EditProductState.confirm_delete)
            async def cancel_delete_product(callback: types.CallbackQuery, state: FSMContext):
                data = await state.get_data()
                product_id = data['product_id']

                with Session() as session:
                    product = session.get(Product, product_id)
                    if product:
                        markup = types.InlineKeyboardMarkup(inline_keyboard=[
                            [types.InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—ã", callback_data="edit_prices"),
                             types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∫—É—Å—ã", callback_data="add_flavors")],
                            [types.InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –≤–∫—É—Å—ã", callback_data="remove_flavors"),
                             types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="delete_product")]
                        ])

                        await callback.message.edit_text(
                            f"‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –¢–æ–≤–∞—Ä: {product.name}",
                            reply_markup=markup
                        )
                        await state.set_state(EditProductState.select_action)
                    else:
                        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                        await state.clear()
                        await cmd_start(callback.message)

                @dp.callback_query(F.data == "remove_flavors", EditProductState.select_action)
                async def select_flavors_to_remove(callback: types.CallbackQuery, state: FSMContext):
                    data = await state.get_data()
                    product_id = data['product_id']

                    with Session() as session:
                        product = session.get(Product, product_id)
                        if product and product.flavors:
                            markup = types.InlineKeyboardMarkup(inline_keyboard=[
                                                                                    [types.InlineKeyboardButton(
                                                                                        text=f"‚ùå {flavor.name}",
                                                                                        callback_data=f"remove_{flavor.id}")]
                                                                                    for flavor in product.flavors
                                                                                ] + [
                                                                                    [types.InlineKeyboardButton(
                                                                                        text="üîô –ù–∞–∑–∞–¥",
                                                                                        callback_data="back_to_actions")]
                                                                                ])

                            await callback.message.edit_text(
                                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                                reply_markup=markup
                            )
                            await state.set_state(EditProductState.remove_flavors)
                        else:
                            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∫—É—Å–æ–≤!", show_alert=True)

                @dp.callback_query(F.data.startswith("remove_"), EditProductState.remove_flavors)
                async def remove_flavor_handler(callback: types.CallbackQuery, state: FSMContext):
                    flavor_id = int(callback.data.split("_")[1])

                    with Session() as session:
                        flavor = session.get(Flavor, flavor_id)
                        if flavor:
                            product_name = flavor.product.name
                            session.delete(flavor)
                            session.commit()
                            await callback.message.edit_text(
                                f"‚úÖ –í–∫—É—Å {flavor.name} —É–¥–∞–ª–µ–Ω –∏–∑ {product_name}"
                            )
                            await select_flavors_to_remove(callback, state)
                        else:
                            await callback.answer("–í–∫—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)

                @dp.callback_query(F.data == "back_to_actions", EditProductState.remove_flavors)
                async def back_to_actions_menu(callback: types.CallbackQuery, state: FSMContext):
                    await select_product_to_edit(callback, state)


@dp.message(EditProductState.add_flavors)
async def add_flavors(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        with Session() as session:
            product = session.query(Product).get(data['product_id'])
            if not product:
                await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç product, —á—Ç–æ–±—ã —Å–ø–∏—Å–æ–∫ –≤–∫—É—Å–æ–≤ –±—ã–ª –∞–∫—Ç—É–∞–ª—å–Ω—ã–º
            session.refresh(product)

            updated_count = 0
            new_count = 0
            errors = []

            # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –≤–≤–æ–¥–∞
            for line in message.text.splitlines():
                line = line.strip()
                if not line:
                    continue
                try:
                    # –†–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä "–Ø–±–ª–æ–∫–æ 10"
                    name, quantity = parse_flavor_line(line)
                    norm_name = name.strip().lower()

                    # –ò—â–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–∫—É—Å —Å—Ä–µ–¥–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º
                    found_flavor = None
                    for flavor in product.flavors:
                        if flavor.name.strip().lower() == norm_name:
                            found_flavor = flavor
                            break

                    if found_flavor:
                        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ ‚Äì —Å—É–º–º–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                        found_flavor.quantity += quantity
                        updated_count += 1
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç ‚Äì —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –≤–∫—É—Å
                        new_flavor = Flavor(name=name.strip(), quantity=quantity, product=product)
                        session.add(new_flavor)
                        new_count += 1

                except ValueError:
                    errors.append(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ: {line}")

            if errors:
                await message.answer("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏:\n" + "\n".join(errors[:5]) +
                                     "\n\nüîÑ –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–Ω–æ–≤–∞ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):")
                return

            session.commit()
            await message.answer(
                f"‚úÖ –¢–æ–≤–∞—Ä <b>{product.name}</b> –æ–±–Ω–æ–≤–ª—ë–Ω!\n"
                f"–ù–æ–≤—ã—Ö –≤–∫—É—Å–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {new_count}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è: {updated_count} –≤–∫—É—Å–æ–≤."
            )
            await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∫—É—Å–æ–≤: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")





@dp.callback_query(F.data.startswith("remove_"), EditProductState.remove_flavors)
async def remove_flavor(callback: types.CallbackQuery, state: FSMContext):
    flavor_id = int(callback.data.split("_")[1])
    data = await state.get_data()

    with Session() as session:
        flavor = session.query(Flavor).get(flavor_id)
        session.delete(flavor)
        session.commit()

    await callback.message.answer("‚úÖ –í–∫—É—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
    await state.clear()
# ======================= –†–∞–±–æ—Ç–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π —Ç–æ–≤–∞—Ä–∞ ======================= #
@dp.message(F.text == "üì• –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É")
async def download_products_table(message: types.Message):
    with Session() as session:
        products = session.query(Product).order_by(Product.name).all()

        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        data = []
        for product in products:
            item = {
                '–¢–æ–≤–∞—Ä': product.name,
                '–ó–∞–∫—É–ø–æ—á–Ω–∞—è —Ü–µ–Ω–∞': product.purchase_price,
                '–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏': product.sale_price,
                '–í–∫—É—Å—ã': [{'name': f.name, 'quantity': f.quantity} for f in product.flavors]
            }
            data.append(item)

        # –°–æ–∑–¥–∞–µ–º –ø–ª–æ—Å–∫–∏–π DataFrame
        rows = []
        for item in data:
            if not item['–í–∫—É—Å—ã']:
                rows.append({
                    '–¢–æ–≤–∞—Ä': item['–¢–æ–≤–∞—Ä'],
                    '–ó–∞–∫—É–ø–æ—á–Ω–∞—è —Ü–µ–Ω–∞': item['–ó–∞–∫—É–ø–æ—á–Ω–∞—è —Ü–µ–Ω–∞'],
                    '–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏': item['–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏'],
                    '–í–∫—É—Å': '–ù–µ—Ç –≤–∫—É—Å–æ–≤',
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': 0
                })
            else:
                for i, flavor in enumerate(item['–í–∫—É—Å—ã']):
                    rows.append({
                        '–¢–æ–≤–∞—Ä': item['–¢–æ–≤–∞—Ä'] if i == 0 else '',  # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
                        '–ó–∞–∫—É–ø–æ—á–Ω–∞—è —Ü–µ–Ω–∞': item['–ó–∞–∫—É–ø–æ—á–Ω–∞—è —Ü–µ–Ω–∞'] if i == 0 else '',
                        '–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏': item['–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏'] if i == 0 else '',
                        '–í–∫—É—Å': flavor['name'],
                        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': flavor['quantity']
                    })

        df = pd.DataFrame(rows)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            df.to_excel(writer, index=False, sheet_name='–¢–æ–≤–∞—Ä—ã', startrow=0)

            workbook = writer.book
            worksheet = writer.sheets['–¢–æ–≤–∞—Ä—ã']

            # –§–æ—Ä–º–∞—Ç –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫
            merge_format = workbook.add_format({
                'valign': 'top',
                'border': 1,
                'text_wrap': True
            })

            # –§–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏ —Ç–æ–≤–∞—Ä–∞ (–∂–∏—Ä–Ω–∞—è –ª–∏–Ω–∏—è)
            border_format = workbook.add_format({
                'bottom': 2,  # –ñ–∏—Ä–Ω–∞—è –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
                'valign': 'top',
                'border': 1,
                'text_wrap': True
            })

            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —è—á–µ–µ–∫ –¥–ª—è —Å—Ç—Ä–æ–∫ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤–∫—É—Å–∞–º–∏
            row_idx = 1
            for product in data:
                flavor_count = len(product['–í–∫—É—Å—ã']) or 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∫—É—Å–æ–≤ –∏–ª–∏ 1 (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)

                if flavor_count == 1:
                    # –ï—Å–ª–∏ –æ–¥–∏–Ω –≤–∫—É—Å, –≤—ã–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∂–∏—Ä–Ω–æ–π –ª–∏–Ω–∏–µ–π
                    worksheet.write(row_idx, 0, product['–¢–æ–≤–∞—Ä'], border_format)
                    worksheet.write(row_idx, 1, product['–ó–∞–∫—É–ø–æ—á–Ω–∞—è —Ü–µ–Ω–∞'], border_format)
                    worksheet.write(row_idx, 2, product['–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏'], border_format)
                    worksheet.write(row_idx, 3, product['–í–∫—É—Å—ã'][0]['name'] if product['–í–∫—É—Å—ã'] else '–ù–µ—Ç –≤–∫—É—Å–æ–≤', border_format)
                    worksheet.write(row_idx, 4, product['–í–∫—É—Å—ã'][0]['quantity'] if product['–í–∫—É—Å—ã'] else 0, border_format)
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∫—É—Å–æ–≤, –æ–±—ä–µ–¥–∏–Ω—è–µ–º —è—á–µ–π–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
                    worksheet.merge_range(row_idx, 0, row_idx + flavor_count - 1, 0, product['–¢–æ–≤–∞—Ä'], merge_format)
                    worksheet.merge_range(row_idx, 1, row_idx + flavor_count - 1, 1, product['–ó–∞–∫—É–ø–æ—á–Ω–∞—è —Ü–µ–Ω–∞'], merge_format)
                    worksheet.merge_range(row_idx, 2, row_idx + flavor_count - 1, 2, product['–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏'], merge_format)

                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –≤–∫—É—Å–æ–≤
                    for flavor_idx in range(flavor_count):
                        current_row = row_idx + flavor_idx
                        if flavor_idx == flavor_count - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ —Ç–æ–≤–∞—Ä–∞
                            worksheet.write(current_row, 3, product['–í–∫—É—Å—ã'][flavor_idx]['name'], border_format)
                            worksheet.write(current_row, 4, product['–í–∫—É—Å—ã'][flavor_idx]['quantity'], border_format)
                        else:  # –û–±—ã—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤–∫—É—Å–æ–≤ –±–µ–∑ –∂–∏—Ä–Ω–æ–π –ª–∏–Ω–∏–∏
                            worksheet.write(current_row, 3, product['–í–∫—É—Å—ã'][flavor_idx]['name'], merge_format)
                            worksheet.write(current_row, 4, product['–í–∫—É—Å—ã'][flavor_idx]['quantity'], merge_format)

                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏
                row_idx += flavor_count

            # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
            for i, width in enumerate([25, 15, 15, 30, 15]):
                worksheet.set_column(i, i, width)

        output.seek(0)
        await message.answer_document(
            types.BufferedInputFile(output.read(), filename="products.xlsx"),
            caption="üì¶ –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤"
        )



# ======================= –ó–∞–ø–∏—Å—å –ø—Ä–æ–¥–∞–∂–∏ ======================= #
@dp.message(F.text == "üíµ –ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–∂—É")
async def start_sale_recording(message: types.Message, state: FSMContext):
    try:
        with Session() as session:
            products = session.query(Product).all()
            if not products:
                await message.answer("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏")
                return

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
            product_buttons = [
                [types.InlineKeyboardButton(text=f"{p.name}", callback_data=f"product_{p.id}")]
                for p in products
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            product_buttons.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")])

            markup = types.InlineKeyboardMarkup(inline_keyboard=product_buttons)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=markup)
            await state.set_state(RecordSaleState.select_product)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤")

@dp.callback_query(F.data == "back_to_main_menu", RecordSaleState.select_product)
async def back_to_main_menu(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–æ–≤–∞—Ä–∞"""
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ç–æ–≤–∞—Ä–∞
        await callback.message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

    await state.clear()  # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await cmd_start(callback.message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é




# –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–¥–µ—Å—å ‚Üì
@dp.callback_query(F.data == "cancel_sale", RecordSaleState.select_product)
async def cancel_sale(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("–ó–∞–ø–∏—Å—å –ø—Ä–æ–¥–∞–∂–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await cmd_start(callback.message)


@dp.callback_query(F.data.startswith("product_"), RecordSaleState.select_product)
async def select_product(callback: types.CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split("_")[1])
    await state.update_data(product_id=product_id)

    with Session() as session:
        product = session.query(Product).get(product_id)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–π –ø—Ä–æ–¥–∞–∂–µ
        data = await state.get_data()
        sales_list = data.get("sales_list", [])

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∫—É—Å–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
        added_flavors = [sale["flavor_name"] for sale in sales_list if sale["product_name"] == product.name]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∫—É—Å–æ–≤, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ
        available_flavors = [f for f in product.flavors if f.name not in added_flavors]

        if not available_flavors:
            await callback.answer("‚ùå –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∫—É—Å—ã —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!", show_alert=True)
            return

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∫—É—Å–æ–≤
        flavor_buttons = [
            [types.InlineKeyboardButton(text=f"{flavor.name} ({flavor.quantity})", callback_data=f"flavor_{flavor.id}")]
            for flavor in available_flavors
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        flavor_buttons.append([types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_products")])

        markup = types.InlineKeyboardMarkup(inline_keyboard=flavor_buttons)

        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å:", reply_markup=markup)
        await state.set_state(RecordSaleState.select_flavor)


from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


@dp.callback_query(F.data == "back_to_products", RecordSaleState.select_flavor)
async def back_to_products(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        with Session() as session:
            products = session.query(Product).all()
            if not products:
                await callback.message.answer("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏")
                return

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
            product_buttons = [
                [InlineKeyboardButton(text=f"{p.name}", callback_data=f"product_{p.id}")]
                for p in products
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤
            product_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main_menu")])

            markup = InlineKeyboardMarkup(inline_keyboard=product_buttons)

            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –µ–≥–æ –Ω–∞ –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞
            await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=markup)
            await state.set_state(RecordSaleState.select_product)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–æ–≤–∞—Ä–∞
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤")


@dp.callback_query(F.data.startswith("flavor_"), RecordSaleState.select_flavor)
async def select_flavor(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –≤–∫—É—Å–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    flavor_id = int(callback.data.split("_")[1])
    await state.update_data(flavor_id=flavor_id)

    with Session() as session:
        flavor = session.get(Flavor, flavor_id)
        if not flavor:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –í–∫—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–π –ø—Ä–æ–¥–∞–∂–µ
        data = await state.get_data()
        sales_list = data.get("sales_list", [])

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∫—É—Å–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
        added_flavors = [sale["flavor_name"] for sale in sales_list if sale["product_name"] == flavor.product.name]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∫—É—Å–æ–≤, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ
        available_flavors = [f for f in flavor.product.flavors if f.name not in added_flavors]

        if not available_flavors:
            await callback.answer("‚ùå –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∫—É—Å—ã —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!", show_alert=True)
            return

        max_quantity = min(flavor.quantity, 10)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 10

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        quantity_buttons = [
            [InlineKeyboardButton(text=str(i), callback_data=f"quantity_{i}") for i in range(1, min(6, max_quantity + 1))],
            [InlineKeyboardButton(text=str(i), callback_data=f"quantity_{i}") for i in range(6, max_quantity + 1)]
        ]

        # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 10, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î—Ä—É–≥–æ–µ"
        if flavor.quantity > 10:
            quantity_buttons.append([InlineKeyboardButton(text="üî¢ –î—Ä—É–≥–æ–µ", callback_data="quantity_other")])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        quantity_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_flavors")])

        markup = InlineKeyboardMarkup(inline_keyboard=quantity_buttons)

        await callback.message.edit_text(f"üì¶ –í–∫—É—Å: <b>{flavor.name}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:",
                                        reply_markup=markup, parse_mode="HTML")
        await state.set_state(RecordSaleState.enter_quantity)  # ‚úÖ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –û–ë–ù–û–í–õ–Ø–ï–ú –°–û–°–¢–û–Ø–ù–ò–ï




@dp.callback_query(F.data.startswith("quantity_"), RecordSaleState.enter_quantity)
async def select_quantity(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ø—Ä–æ–¥–∞–∂–µ."""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ callback data
    try:
        quantity = int(callback.data.split("_")[1])
    except ValueError:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞!", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    data = await state.get_data()
    # –ï—Å–ª–∏ —Å–ø–∏—Å–∫–∞ –µ—â—ë –Ω–µ—Ç ‚Äì —Å–æ–∑–¥–∞—ë–º –µ–≥–æ
    if "sales_list" not in data:
        data["sales_list"] = []

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞ –∏ –≤–∫—É—Å–∞ –∏–∑ –ë–î
    with Session() as session:
        product = session.query(Product).get(data["product_id"])
        flavor = session.query(Flavor).get(data["flavor_id"])

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–¥–∞–∂–µ –≤ —Å–ø–∏—Å–æ–∫
    data["sales_list"].append({
        "product_name": product.name,
        "flavor_name": flavor.name,
        "quantity": quantity
    })
    await state.update_data(sales_list=data["sales_list"])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ –ø—Ä–æ–¥–∞–∂—É
    sale_items = "\n".join(
        f"‚Ä¢ {item['product_name']} ‚Äì {item['flavor_name']} ‚Äì {item['quantity']} —à—Ç."
        for item in data["sales_list"]
    )

    # –ì–æ—Ç–æ–≤–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ç–æ–≤–∞—Ä", callback_data="add_more")],
        [types.InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–¥–∞–∂—É", callback_data="finish_sale")]
    ])

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
    await callback.message.edit_text(
        f"‚úÖ –¢–æ–≤–∞—Ä—ã –≤ –ø—Ä–æ–¥–∞–∂–µ:\n{sale_items}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )
    await state.set_state(RecordSaleState.confirm_more_items)









@dp.message(RecordSaleState.enter_quantity)
async def enter_sale_quantity(message: types.Message, state: FSMContext):
    try:
        quantity = int(message.text)
        await process_sale(message, quantity, state)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")


async def process_sale(message, quantity, state):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥–∞–∂–∏ (–æ–±—â–∞—è –¥–ª—è callback –∏ message)"""
    data = await state.get_data()

    with Session() as session:
        flavor = session.query(Flavor).get(data['flavor_id'])
        product = session.query(Product).get(data['product_id'])

        if flavor.quantity < quantity:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å: {flavor.quantity}")
            return

        flavor.quantity -= quantity

        sale = Sale(
            product=product,
            flavor=flavor,
            quantity=quantity,
            purchase_price=product.purchase_price,
            sale_price=product.sale_price
        )
        session.add(sale)

        profit = (sale.sale_price - sale.purchase_price) * quantity
        lena_income = profit * 0.3

        today = datetime.datetime.now().date()
        current_week_start = datetime.datetime.combine(
            today - datetime.timedelta(days=today.weekday()),
            datetime.time.min
        )
        income_record = session.query(WorkerIncome).filter(
            WorkerIncome.week_start == current_week_start
        ).first()

        if not income_record:
            income_record = WorkerIncome(
                week_start=current_week_start,
                income=0.0,
                is_current=True
            )
            session.add(income_record)

        income_record.income += lena_income

        session.query(WorkerIncome).filter(
            WorkerIncome.week_start != current_week_start
        ).update({WorkerIncome.is_current: False})

        session.commit()

        await message.answer(
            f"‚úÖ <b>–ü—Ä–æ–¥–∞–∂–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!</b>\n"
            f"üì¶ <b>–¢–æ–≤–∞—Ä:</b> {product.name}\n"
            f"üçè <b>–í–∫—É—Å:</b> {flavor.name}\n"
            f"üì¶ <b>–ü—Ä–æ–¥–∞–Ω–æ:</b> {quantity} —à—Ç.\n"
            f"üí∞ <b>–í—ã—Ä—É—á–∫–∞:</b> {quantity * product.sale_price} ‚ÇΩ\n"
            f"üë®üíº <b>–î–æ—Ö–æ–¥ –õ—ë–Ω–∏:</b> {lena_income:.2f} ‚ÇΩ",
            parse_mode="HTML"
        )
    await state.clear()



@dp.message(RecordSaleState.enter_quantity)
async def enter_sale_quantity(message: types.Message, state: FSMContext):
    try:
        quantity = int(message.text)
        await process_sale(message, quantity, state)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")


async def process_sale(event, quantity, state):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥–∞–∂–∏ (–æ–±—â–∞—è –¥–ª—è callback –∏ message)"""
    data = await state.get_data()

    with Session() as session:
        flavor = session.query(Flavor).get(data['flavor_id'])
        product = session.query(Product).get(data['product_id'])

        if flavor.quantity < quantity:
            await event.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å: {flavor.quantity}")
            return

        flavor.quantity -= quantity

        sale = Sale(
            product=product,
            flavor=flavor,
            quantity=quantity,
            purchase_price=product.purchase_price,
            sale_price=product.sale_price
        )
        session.add(sale)

        profit = (sale.sale_price - sale.purchase_price) * quantity
        lena_income = profit * 0.3

        today = datetime.datetime.now().date()
        current_week_start = datetime.datetime.combine(
            today - datetime.timedelta(days=today.weekday()),
            datetime.time.min
        )
        income_record = session.query(WorkerIncome).filter(
            WorkerIncome.week_start == current_week_start
        ).first()

        if not income_record:
            income_record = WorkerIncome(
                week_start=current_week_start,
                income=0.0,
                is_current=True
            )
            session.add(income_record)

        income_record.income += lena_income

        session.query(WorkerIncome).filter(
            WorkerIncome.week_start != current_week_start
        ).update({WorkerIncome.is_current: False})

        session.commit()

        await event.answer(
            f"‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n"
            f"üì¶ –¢–æ–≤–∞—Ä: {product.name}\n"
            f"üçè –í–∫—É—Å: {flavor.name}\n"
            f"üì¶ –ü—Ä–æ–¥–∞–Ω–æ: {quantity} —à—Ç.\n"
            f"üí∞ –í—ã—Ä—É—á–∫–∞: {quantity * product.sale_price} ‚ÇΩ\n"
            f"üë®üíº –î–æ—Ö–æ–¥ –õ—ë–Ω–∏: {lena_income:.2f} ‚ÇΩ"
        )
    await state.clear()


@dp.message(RecordSaleState.enter_quantity)
async def enter_sale_quantity(message: types.Message, state: FSMContext):
    try:
        quantity = int(message.text)
        data = await state.get_data()

        with Session() as session:
            flavor = session.query(Flavor).get(data['flavor_id'])
            product = session.query(Product).get(data['product_id'])

            if flavor.quantity < quantity:
                await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å: {flavor.quantity}")
                return

            flavor.quantity -= quantity

            sale = Sale(
                product=product,
                flavor=flavor,
                quantity=quantity,
                purchase_price=product.purchase_price,
                sale_price=product.sale_price
            )
            session.add(sale)

            profit = (sale.sale_price - sale.purchase_price) * quantity
            lena_income = profit * 0.3

            today = datetime.datetime.now().date()
            current_week_start = datetime.datetime.combine(
                today - datetime.timedelta(days=today.weekday()),
                datetime.time.min
            )
            income_record = session.query(WorkerIncome).filter(
                WorkerIncome.week_start == current_week_start
            ).first()

            if not income_record:
                income_record = WorkerIncome(
                    week_start=current_week_start,
                    income=0.0,
                    is_current=True
                )
                session.add(income_record)

            income_record.income += lena_income

            session.query(WorkerIncome).filter(
                WorkerIncome.week_start != current_week_start
            ).update({WorkerIncome.is_current: False})

            session.commit()

            await message.answer(
                f"‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n"
                f"üì¶ –¢–æ–≤–∞—Ä: {product.name}\n"
                f"üçè –í–∫—É—Å: {flavor.name}\n"
                f"üì¶ –ü—Ä–æ–¥–∞–Ω–æ: {quantity} —à—Ç.\n"
                f"üí∞ –í—ã—Ä—É—á–∫–∞: {quantity * product.sale_price} ‚ÇΩ\n"
                f"üë®üíº –î–æ—Ö–æ–¥ –õ—ë–Ω–∏: {lena_income:.2f} ‚ÇΩ"
            )
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
    finally:
        await state.clear()

# ======================= –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ ======================= #
@dp.message(F.text == "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
async def show_analytics(message: types.Message):
    markup = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
             types.KeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü")],
            [types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer("üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:", reply_markup=markup)


@dp.message(F.text == "üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_current_stats(message: types.Message):
    try:
        with Session() as session:
            today = datetime.date.today()

            # –†–∞—Å—Å—á–µ—Ç –¥–∞—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
            current_week_start = datetime.datetime.combine(
                today - datetime.timedelta(days=today.weekday()),
                datetime.time.min
            )
            current_week_end = current_week_start + datetime.timedelta(days=6)

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
            current_week_sales = session.query(Sale).filter(
                Sale.date >= current_week_start,
                Sale.date <= current_week_end
            ).all()

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            daily_sales = session.query(Sale).filter(func.date(Sale.date) == today).all()

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            monthly_sales = session.query(Sale).filter(
                func.extract('month', Sale.date) == today.month,
                func.extract('year', Sale.date) == today.year
            ).all()

            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
            def calculate_stats(sales):
                revenue = sum(s.sale_price * s.quantity for s in sales)
                profit = sum((s.sale_price - s.purchase_price) * s.quantity for s in sales)
                lena = profit * 0.3
                return revenue, profit, lena

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            daily_revenue, daily_profit, daily_lena = calculate_stats(daily_sales)
            weekly_revenue, weekly_profit, weekly_lena = calculate_stats(current_week_sales)
            monthly_revenue, monthly_profit, monthly_lena = calculate_stats(monthly_sales)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = [
                "üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂</b>",
                f"\nüïí <u>–°–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m.%Y')}):</u>",
                f"‚îú –í—ã—Ä—É—á–∫–∞: {daily_revenue:.2f} ‚ÇΩ",
                f"‚îú –ü—Ä–∏–±—ã–ª—å: {daily_profit:.2f} ‚ÇΩ",
                f"‚îî –î–æ—Ö–æ–¥ –õ—ë–Ω–∏: {daily_lena:.2f} ‚ÇΩ",

                f"\nüìÖ <u>–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:</u>",
                f"‚îú –í—ã—Ä—É—á–∫–∞: {monthly_revenue:.2f} ‚ÇΩ",
                f"‚îú –ü—Ä–∏–±—ã–ª—å: {monthly_profit:.2f} ‚ÇΩ",
                f"‚îî –î–æ—Ö–æ–¥ –õ—ë–Ω–∏: {monthly_lena:.2f} ‚ÇΩ",

                f"\nüìÜ <u>–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è ({current_week_start.strftime('%d.%m')}-{current_week_end.strftime('%d.%m')}):</u>",
                f"‚îú –í—ã—Ä—É—á–∫–∞: {weekly_revenue:.2f} ‚ÇΩ",
                f"‚îú –ü—Ä–∏–±—ã–ª—å: {weekly_profit:.2f} ‚ÇΩ",
                f"‚îî –î–æ—Ö–æ–¥ –õ—ë–Ω–∏: {weekly_lena:.2f} ‚ÇΩ",
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é
            last_week_start = current_week_start - datetime.timedelta(weeks=1)
            last_week_income = session.query(WorkerIncome).filter_by(week_start=last_week_start).first()
            if last_week_income:
                response.append(f"\n‚èÆ <u>–ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è:</u>\n‚îî –î–æ—Ö–æ–¥ –õ—ë–Ω–∏: {last_week_income.income:.2f} ‚ÇΩ")

            await message.answer("\n".join(response))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")




# ======================= –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ======================= #
@dp.message()
async def handle_unknown(message: types.Message):
    await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /start")

@dp.callback_query()
async def handle_unknown_callback(callback: types.CallbackQuery):
    await callback.answer("‚ö†Ô∏è –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)




# ======================= –ó–ê–ü–£–°–ö ======================= #

if __name__ == "__main__":
    import asyncio

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    asyncio.run(dp.start_polling(bot))