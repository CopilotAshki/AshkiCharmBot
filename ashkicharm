# ======================= –ò–ú–ü–û–†–¢–´ –ò –ù–ê–°–¢–†–û–ô–ö–ò ======================= #
import os
import logging
import re
import pandas as pd
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from sqlalchemy import create_engine, Column, Integer, String, Float, ForeignKey, DateTime, Boolean
from sqlalchemy.orm import declarative_base, Session, sessionmaker, relationship
from sqlalchemy.sql import func
import datetime
import io
from dotenv import load_dotenv
load_dotenv()  # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

print("–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:", os.getcwd())
print("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:", os.listdir())


BOT_TOKEN = os.getenv("BOT_TOKEN")
print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω: {BOT_TOKEN}")



# ======================= –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ì–ï–†–ê ======================= #
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.FileHandler("bot.log"), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# ======================= –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ======================= #

BOT_TOKEN = os.getenv("BOT_TOKEN")  # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not BOT_TOKEN:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN.")

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

# ======================= –ë–ê–ó–ê –î–ê–ù–ù–´–• ======================= #
Base = declarative_base()

def get_database_url():
    return os.getenv("DATABASE_URL", "sqlite:///database.db")  # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PostgreSQL –∏–ª–∏ –¥—Ä—É–≥—É—é –°–£–ë–î

engine = create_engine(get_database_url())
Session = sessionmaker(bind=engine)

class Product(Base):
    __tablename__ = "products"
    id = Column(Integer, primary_key=True)
    name = Column(String(50), unique=True, nullable=False)
    purchase_price = Column(Float)
    sale_price = Column(Float)
    flavors = relationship("Flavor", back_populates="product", cascade="all, delete-orphan")
    sales = relationship("Sale", back_populates="product")

class Flavor(Base):
    __tablename__ = "flavors"
    id = Column(Integer, primary_key=True)
    name = Column(String(100))
    quantity = Column(Integer)
    product_id = Column(Integer, ForeignKey("products.id"))
    product = relationship("Product", back_populates="flavors")
    sales = relationship("Sale", back_populates="flavor")

class Sale(Base):
    __tablename__ = "sales"
    id = Column(Integer, primary_key=True)
    product_id = Column(Integer, ForeignKey("products.id"))
    flavor_id = Column(Integer, ForeignKey("flavors.id"))
    quantity = Column(Integer)
    purchase_price = Column(Float)
    sale_price = Column(Float)
    date = Column(DateTime, default=datetime.datetime.now)

    product = relationship("Product", back_populates="sales")
    flavor = relationship("Flavor", back_populates="sales")
class WorkerIncome(Base):
    __tablename__ = "worker_income"
    id = Column(Integer, primary_key=True)
    week_start = Column(DateTime)
    income = Column(Float)
    is_current = Column(Boolean, default=True)

Base.metadata.create_all(engine)

# ======================= –°–û–°–¢–û–Ø–ù–ò–Ø FSM ======================= #
class AddProductState(StatesGroup):
    enter_name = State()
    enter_prices = State()
    enter_flavors = State()

    class CancelState(StatesGroup):
        confirm_cancel = State()

class EditProductState(StatesGroup):
    select_product = State()
    select_action = State()
    update_prices = State()
    add_flavors = State()
    remove_flavors = State()
    confirm_delete = State()

class FileUploadState(StatesGroup):
    waiting_file = State()

class RecordSaleState(StatesGroup):
    select_product = State()
    select_flavor = State()
    enter_quantity = State()

# ======================= –£–¢–ò–õ–ò–¢–´ ======================= #
def parse_flavor_line(line: str):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ —Å –≤–∫—É—Å–æ–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º"""
    try:
        match = re.search(r'(.*?)\s+(\d+)$', line.strip())
        if not match:
            raise ValueError
        return match.group(1).strip(), int(match.group(2))
    except Exception:
        raise ValueError(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ: {line}")

# ======================= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ======================= #
@dp.message(AddProductState.enter_name)
async def enter_product_name(message: types.Message, state: FSMContext):
    if message.text.lower() in ["–æ—Ç–º–µ–Ω–∞", "/cancel"]:
        await state.clear()
        await cmd_start(message)
        return

    name = message.text.strip()
    with Session() as session:
        if session.query(Product).filter_by(name=name).first():
            await message.answer("‚ùå –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
    await state.update_data(name=name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–ó–∞–∫—É–ø–æ—á–Ω–∞—è –ü—Ä–æ–¥–∞–∂–Ω–∞—è):",
                        reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(AddProductState.enter_prices)

@dp.message(AddProductState.enter_prices)
async def enter_product_prices(message: types.Message, state: FSMContext):
    if message.text.lower() in ["–æ—Ç–º–µ–Ω–∞", "/cancel"]:
        await state.clear()
        await cmd_start(message)
        return

    try:
        purchase_price, sale_price = map(float, message.text.split())
        await state.update_data(purchase_price=purchase_price, sale_price=sale_price)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∫—É—Å—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):\n–ü—Ä–∏–º–µ—Ä:\n–Ø–±–ª–æ–∫–æ 10\n–ë–∞–Ω–∞–Ω 5",
                            reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(AddProductState.enter_flavors)
    except:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ó–∞–∫—É–ø–æ—á–Ω–∞—è –ü—Ä–æ–¥–∞–∂–Ω–∞—è")
        return

@dp.message(Command("start", "help"))
async def cmd_start(message: types.Message):
    markup = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏"),
             types.KeyboardButton(text="üíµ –ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–∂—É")],
            [types.KeyboardButton(text="üì¶ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã"),
             types.KeyboardButton(text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")]
        ],
        resize_keyboard=True
    )
    await message.answer("üè™ <b>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@dp.message(Command("cancel"))
async def cmd_cancel(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())
    await cmd_start(message)




# ======================= –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê–ú–ò ======================= #
@dp.callback_query(F.data == "cancel_delete", EditProductState.confirm_delete)
async def cancel_delete_product(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    product_id = data['product_id']

    with Session() as session:
        product = session.get(Product, product_id)
        if product:
            markup = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—ã", callback_data="edit_prices"),
                 types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∫—É—Å—ã", callback_data="add_flavors")],
                [types.InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –≤–∫—É—Å—ã", callback_data="remove_flavors"),
                 types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="delete_product")],
                [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_products")]
            ])
            await callback.message.edit_text(
                f"‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –¢–æ–≤–∞—Ä: {product.name}",
                reply_markup=markup
            )
            await state.set_state(EditProductState.select_action)
        else:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            await state.clear()
            await cmd_start(callback.message)


@dp.callback_query(F.data == "back_to_products", EditProductState.select_action)
async def back_to_products_list(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()
    await start_editing_product(callback.message, state)

@dp.message(F.text == "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏")
async def products_menu(message: types.Message):
    markup = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üÜï –°–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä"),
             types.KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä")],
            [types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer("üì¶ <b>–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏</b>", reply_markup=markup)

@dp.message(F.text == "üì¶ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã")
async def show_products_menu(message: types.Message):
    with Session() as session:
        products = session.query(Product).all()

        if not products:
            await message.answer("üì≠ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ")
            return

        for product in products:
            flavors_info = []
            for flavor in product.flavors:
                if flavor.quantity == 0:
                    emoji = "üî¥"
                elif flavor.quantity == 1:
                    emoji = "üü°"
                else:
                    emoji = "üü¢"

                flavors_info.append(f"‚îú {flavor.name} - {flavor.quantity} —à—Ç {emoji}")

            product_text = [
                f"üìå {product.name} –ó-{int(product.purchase_price)}‚ÇΩ / –ü-{int(product.sale_price)}‚ÇΩ",
                "üçè –í–∫—É—Å—ã:"
            ] + flavors_info

            await message.answer("\n".join(product_text))
    markup = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É"),
             types.KeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É")],
            [types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer("üì¶ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ç–∞–±–ª–∏—Ü–µ–π:</b>", reply_markup=markup)

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main(message: types.Message):
    await cmd_start(message)

@dp.message(F.text == "üÜï –°–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä")
async def start_adding_product(message: types.Message, state: FSMContext):
    await state.set_state(AddProductState.enter_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=types.ReplyKeyboardRemove())


@dp.message(AddProductState.enter_name)
async def enter_product_name(message: types.Message, state: FSMContext):
    if message.text in ["üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", "üíµ –ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–∂—É", "üì¶ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "üîô –ù–∞–∑–∞–¥"]:
        await state.clear()
        await cmd_start(message)
        return


    name = message.text.strip()
    if not name:
        await message.answer("‚ùå –ò–º—è —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
        return
    await state.update_data(name=name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n–§–æ—Ä–º–∞—Ç: <b>–ó–∞–∫—É–ø–æ—á–Ω–∞—è –ü—Ä–æ–¥–∞–∂–Ω–∞—è</b>\n–ü—Ä–∏–º–µ—Ä: 100 200")
    await state.set_state(AddProductState.enter_prices)


@dp.message(AddProductState.enter_prices)
async def enter_product_prices(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏–ª–∏ "–ù–∞–∑–∞–¥"
    if message.text in ["üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", "üíµ –ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–∂—É", "üì¶ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "üîô –ù–∞–∑–∞–¥"]:
        await state.clear()  # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await cmd_start(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        return

    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    try:
        purchase_price, sale_price = map(float, message.text.split())
        await state.update_data(purchase_price=purchase_price, sale_price=sale_price)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∫—É—Å—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):\n–ü—Ä–∏–º–µ—Ä:\n–Ø–±–ª–æ–∫–æ 10\n–ë–∞–Ω–∞–Ω 5")
        await state.set_state(AddProductState.enter_flavors)
    except:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<b>–ó–∞–∫—É–ø–æ—á–Ω–∞—è –ü—Ä–æ–¥–∞–∂–Ω–∞—è</b>\n–ü—Ä–∏–º–µ—Ä: 100 200")
        return

@dp.message(AddProductState.enter_flavors)
async def enter_product_flavors(message: types.Message, state: FSMContext):
    if message.text in ["üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", "üíµ –ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–∂—É", "üì¶ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "üîô –ù–∞–∑–∞–¥"]:
        await state.clear()
        await cmd_start(message)
        return

    try:
        data = await state.get_data()
        with Session() as session:
            product = Product(
                name=data['name'],
                purchase_price=data['purchase_price'],
                sale_price=data['sale_price']
            )
            session.add(product)
            session.commit()

            flavors = []
            errors = []
            for line in message.text.split('\n'):
                line = line.strip()
                if not line: continue
                try:
                    name, quantity = parse_flavor_line(line)
                    flavors.append(Flavor(name=name, quantity=quantity, product=product))
                except Exception as e:
                    errors.append(f"‚ùå {line}")

            if errors:
                await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∏ –≤ —Å—Ç—Ä–æ–∫–∞—Ö:\n" + "\n".join(errors[:5]) + ("\n..." if len(errors) > 5 else ""))

            if flavors:
                session.add_all(flavors)
                session.commit()
                await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä <b>{product.name}</b> –¥–æ–±–∞–≤–ª–µ–Ω!\nüçè –í–∫—É—Å–æ–≤: {len(flavors)}")
                await cmd_start(message)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
            else:
                session.delete(product)
                session.commit()
                await message.answer("‚ùå –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∫—É—Å–∞!")
                await cmd_start(message)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞!")
    finally:
        await state.clear()



# –ö–æ–º–∞–Ω–¥–∞ "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä"
@dp.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä")
async def start_editing_product(message: types.Message, state: FSMContext):
    with Session() as session:
        products = session.query(Product).filter(Product.name.isnot(None)).all()

        if not products:
            await message.answer("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        buttons = []
        for product in products:
            buttons.append([types.InlineKeyboardButton(
                text=product.name,
                callback_data=f"edit_{product.id}"
            )])

        markup = types.InlineKeyboardMarkup(inline_keyboard=buttons)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=markup)
        await state.set_state(EditProductState.select_product)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
@dp.callback_query(F.data.startswith("edit_"), EditProductState.select_product)
async def select_product_to_edit(callback: types.CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split("_")[1])
    await state.update_data(product_id=product_id)

    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—ã", callback_data="edit_prices"),
         types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∫—É—Å—ã", callback_data="add_flavors")],
        [types.InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –≤–∫—É—Å—ã", callback_data="remove_flavors"),
         types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="delete_product")]
    ])

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    await state.set_state(EditProductState.select_action)
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞






@dp.callback_query(F.data == "delete_product", EditProductState.select_action)
async def delete_product_handler(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    product_id = data.get('product_id')

    with Session() as session:
        product = session.get(Product, product_id)
        if product:
            markup = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_delete_{product_id}")],
                [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")]
            ])
            await callback.message.edit_text(
                f"‚ùó –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä <b>{product.name}</b>?",
                reply_markup=markup
            )
            await state.set_state(EditProductState.confirm_delete)
        else:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
            await state.clear()
            await cmd_start(callback.message)



@dp.callback_query(EditProductState.select_action)
async def handle_edit_action(callback: types.CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∏–ª–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if callback.data in ["üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", "üíµ –ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–∂—É", "üì¶ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "üîô –ù–∞–∑–∞–¥"]:
        await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await cmd_start(callback.message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        return

    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    action = callback.data
    data = await state.get_data()

    if action == "edit_prices":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n–§–æ—Ä–º–∞—Ç: <b>–ó–∞–∫—É–ø–æ—á–Ω–∞—è –ü—Ä–æ–¥–∞–∂–Ω–∞—è</b>")
        await state.set_state(EditProductState.update_prices)

    elif action == "add_flavors":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –≤–∫—É—Å—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):")
        await state.set_state(EditProductState.add_flavors)

    elif action == "remove_flavors":
        with Session() as session:
            product = session.query(Product).get(data['product_id'])
            markup = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text=f.name, callback_data=f"remove_{f.id}")]
                for f in product.flavors
            ])
            await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
            await state.set_state(EditProductState.remove_flavors)


@dp.message(EditProductState.update_prices)
async def update_prices(message: types.Message, state: FSMContext):
    try:
        purchase_price, sale_price = map(float, message.text.split())
        data = await state.get_data()

        with Session() as session:
            product = session.query(Product).get(data['product_id'])
            product.purchase_price = purchase_price
            product.sale_price = sale_price
            session.commit()

        await message.answer("‚úÖ –¶–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        await state.clear()
    except:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<b>–ó–∞–∫—É–ø–æ—á–Ω–∞—è –ü—Ä–æ–¥–∞–∂–Ω–∞—è</b>\n–ü—Ä–∏–º–µ—Ä: 100 200")
        return


@dp.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete_product(callback: types.CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split("_")[-1])

    with Session() as session:
        product = session.get(Product, product_id)
        if product:
            session.delete(product)
            session.commit()
            await callback.message.edit_text(f"‚úÖ –¢–æ–≤–∞—Ä <b>{product.name}</b> —É–¥–∞–ª–µ–Ω!")
            await state.clear()
            await cmd_start(callback.message)
        else:
            await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)

            @dp.callback_query(F.data == "cancel_delete", EditProductState.confirm_delete)
            async def cancel_delete_product(callback: types.CallbackQuery, state: FSMContext):
                data = await state.get_data()
                product_id = data['product_id']

                with Session() as session:
                    product = session.get(Product, product_id)
                    if product:
                        markup = types.InlineKeyboardMarkup(inline_keyboard=[
                            [types.InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—ã", callback_data="edit_prices"),
                             types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∫—É—Å—ã", callback_data="add_flavors")],
                            [types.InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –≤–∫—É—Å—ã", callback_data="remove_flavors"),
                             types.InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="delete_product")]
                        ])

                        await callback.message.edit_text(
                            f"‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –¢–æ–≤–∞—Ä: {product.name}",
                            reply_markup=markup
                        )
                        await state.set_state(EditProductState.select_action)
                    else:
                        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                        await state.clear()
                        await cmd_start(callback.message)

                @dp.callback_query(F.data == "remove_flavors", EditProductState.select_action)
                async def select_flavors_to_remove(callback: types.CallbackQuery, state: FSMContext):
                    data = await state.get_data()
                    product_id = data['product_id']

                    with Session() as session:
                        product = session.get(Product, product_id)
                        if product and product.flavors:
                            markup = types.InlineKeyboardMarkup(inline_keyboard=[
                                                                                    [types.InlineKeyboardButton(
                                                                                        text=f"‚ùå {flavor.name}",
                                                                                        callback_data=f"remove_{flavor.id}")]
                                                                                    for flavor in product.flavors
                                                                                ] + [
                                                                                    [types.InlineKeyboardButton(
                                                                                        text="üîô –ù–∞–∑–∞–¥",
                                                                                        callback_data="back_to_actions")]
                                                                                ])

                            await callback.message.edit_text(
                                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                                reply_markup=markup
                            )
                            await state.set_state(EditProductState.remove_flavors)
                        else:
                            await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∫—É—Å–æ–≤!", show_alert=True)

                @dp.callback_query(F.data.startswith("remove_"), EditProductState.remove_flavors)
                async def remove_flavor_handler(callback: types.CallbackQuery, state: FSMContext):
                    flavor_id = int(callback.data.split("_")[1])

                    with Session() as session:
                        flavor = session.get(Flavor, flavor_id)
                        if flavor:
                            product_name = flavor.product.name
                            session.delete(flavor)
                            session.commit()
                            await callback.message.edit_text(
                                f"‚úÖ –í–∫—É—Å {flavor.name} —É–¥–∞–ª–µ–Ω –∏–∑ {product_name}"
                            )
                            await select_flavors_to_remove(callback, state)
                        else:
                            await callback.answer("–í–∫—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)

                @dp.callback_query(F.data == "back_to_actions", EditProductState.remove_flavors)
                async def back_to_actions_menu(callback: types.CallbackQuery, state: FSMContext):
                    await select_product_to_edit(callback, state)

@dp.message(EditProductState.add_flavors)
async def add_flavors(message: types.Message, state: FSMContext):
    try:
        data = await state.get_data()
        with Session() as session:
            product = session.query(Product).get(data['product_id'])

            flavors = []
            errors = []
            for line in message.text.split('\\n'):
                line = line.strip()
                if not line:
                    continue
                try:
                    name, quantity = parse_flavor_line(line)
                    flavors.append(Flavor(name=name, quantity=quantity, product=product))
                except Exception as e:
                    errors.append(f"‚ùå {line}")

            if errors:
                await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∏ –≤ —Å—Ç—Ä–æ–∫–∞—Ö:\\n" + "\\n".join(errors[:5]))

            if flavors:
                session.add_all(flavors)
                session.commit()
                await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(flavors)} –Ω–æ–≤—ã—Ö –≤–∫—É—Å–æ–≤!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∫—É—Å–æ–≤!")
    finally:
        await state.clear()

@dp.callback_query(F.data.startswith("remove_"), EditProductState.remove_flavors)
async def remove_flavor(callback: types.CallbackQuery, state: FSMContext):
    flavor_id = int(callback.data.split("_")[1])
    data = await state.get_data()

    with Session() as session:
        flavor = session.query(Flavor).get(flavor_id)
        session.delete(flavor)
        session.commit()

    await callback.message.answer("‚úÖ –í–∫—É—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
    await state.clear()
# ======================= –†–∞–±–æ—Ç–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π —Ç–æ–≤–∞—Ä–∞ ======================= #
@dp.message(F.text == "üì• –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É")
async def download_products_table(message: types.Message):
    with Session() as session:
        products = session.query(Product).order_by(Product.name).all()

        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        data = []
        for product in products:
            item = {
                '–¢–æ–≤–∞—Ä': product.name,
                '–ó–∞–∫—É–ø–æ—á–Ω–∞—è —Ü–µ–Ω–∞': product.purchase_price,
                '–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏': product.sale_price,
                '–í–∫—É—Å—ã': [{'name': f.name, 'quantity': f.quantity} for f in product.flavors]
            }
            data.append(item)

        # –°–æ–∑–¥–∞–µ–º –ø–ª–æ—Å–∫–∏–π DataFrame
        rows = []
        for item in data:
            if not item['–í–∫—É—Å—ã']:
                rows.append({
                    '–¢–æ–≤–∞—Ä': item['–¢–æ–≤–∞—Ä'],
                    '–ó–∞–∫—É–ø–æ—á–Ω–∞—è —Ü–µ–Ω–∞': item['–ó–∞–∫—É–ø–æ—á–Ω–∞—è —Ü–µ–Ω–∞'],
                    '–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏': item['–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏'],
                    '–í–∫—É—Å': '–ù–µ—Ç –≤–∫—É—Å–æ–≤',
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': 0
                })
            else:
                for i, flavor in enumerate(item['–í–∫—É—Å—ã']):
                    rows.append({
                        '–¢–æ–≤–∞—Ä': item['–¢–æ–≤–∞—Ä'] if i == 0 else '',  # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
                        '–ó–∞–∫—É–ø–æ—á–Ω–∞—è —Ü–µ–Ω–∞': item['–ó–∞–∫—É–ø–æ—á–Ω–∞—è —Ü–µ–Ω–∞'] if i == 0 else '',
                        '–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏': item['–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏'] if i == 0 else '',
                        '–í–∫—É—Å': flavor['name'],
                        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': flavor['quantity']
                    })

        df = pd.DataFrame(rows)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            df.to_excel(writer, index=False, sheet_name='–¢–æ–≤–∞—Ä—ã', startrow=0)

            workbook = writer.book
            worksheet = writer.sheets['–¢–æ–≤–∞—Ä—ã']

            # –§–æ—Ä–º–∞—Ç –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫
            merge_format = workbook.add_format({
                'valign': 'top',
                'border': 1,
                'text_wrap': True
            })

            # –§–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏ —Ç–æ–≤–∞—Ä–∞ (–∂–∏—Ä–Ω–∞—è –ª–∏–Ω–∏—è)
            border_format = workbook.add_format({
                'bottom': 2,  # –ñ–∏—Ä–Ω–∞—è –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
                'valign': 'top',
                'border': 1,
                'text_wrap': True
            })

            # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —è—á–µ–µ–∫ –¥–ª—è —Å—Ç—Ä–æ–∫ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –≤–∫—É—Å–∞–º–∏
            row_idx = 1
            for product in data:
                flavor_count = len(product['–í–∫—É—Å—ã']) or 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∫—É—Å–æ–≤ –∏–ª–∏ 1 (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)

                if flavor_count == 1:
                    # –ï—Å–ª–∏ –æ–¥–∏–Ω –≤–∫—É—Å, –≤—ã–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∂–∏—Ä–Ω–æ–π –ª–∏–Ω–∏–µ–π
                    worksheet.write(row_idx, 0, product['–¢–æ–≤–∞—Ä'], border_format)
                    worksheet.write(row_idx, 1, product['–ó–∞–∫—É–ø–æ—á–Ω–∞—è —Ü–µ–Ω–∞'], border_format)
                    worksheet.write(row_idx, 2, product['–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏'], border_format)
                    worksheet.write(row_idx, 3, product['–í–∫—É—Å—ã'][0]['name'] if product['–í–∫—É—Å—ã'] else '–ù–µ—Ç –≤–∫—É—Å–æ–≤', border_format)
                    worksheet.write(row_idx, 4, product['–í–∫—É—Å—ã'][0]['quantity'] if product['–í–∫—É—Å—ã'] else 0, border_format)
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∫—É—Å–æ–≤, –æ–±—ä–µ–¥–∏–Ω—è–µ–º —è—á–µ–π–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
                    worksheet.merge_range(row_idx, 0, row_idx + flavor_count - 1, 0, product['–¢–æ–≤–∞—Ä'], merge_format)
                    worksheet.merge_range(row_idx, 1, row_idx + flavor_count - 1, 1, product['–ó–∞–∫—É–ø–æ—á–Ω–∞—è —Ü–µ–Ω–∞'], merge_format)
                    worksheet.merge_range(row_idx, 2, row_idx + flavor_count - 1, 2, product['–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏'], merge_format)

                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –≤–∫—É—Å–æ–≤
                    for flavor_idx in range(flavor_count):
                        current_row = row_idx + flavor_idx
                        if flavor_idx == flavor_count - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ —Ç–æ–≤–∞—Ä–∞
                            worksheet.write(current_row, 3, product['–í–∫—É—Å—ã'][flavor_idx]['name'], border_format)
                            worksheet.write(current_row, 4, product['–í–∫—É—Å—ã'][flavor_idx]['quantity'], border_format)
                        else:  # –û–±—ã—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤–∫—É—Å–æ–≤ –±–µ–∑ –∂–∏—Ä–Ω–æ–π –ª–∏–Ω–∏–∏
                            worksheet.write(current_row, 3, product['–í–∫—É—Å—ã'][flavor_idx]['name'], merge_format)
                            worksheet.write(current_row, 4, product['–í–∫—É—Å—ã'][flavor_idx]['quantity'], merge_format)

                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏
                row_idx += flavor_count

            # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
            for i, width in enumerate([25, 15, 15, 30, 15]):
                worksheet.set_column(i, i, width)

        output.seek(0)
        await message.answer_document(
            types.BufferedInputFile(output.read(), filename="products.xlsx"),
            caption="üì¶ –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤"
        )



# ======================= –ó–∞–ø–∏—Å—å –ø—Ä–æ–¥–∞–∂–∏ ======================= #
@dp.message(F.text == "üíµ –ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–∂—É")
async def start_sale_recording(message: types.Message, state: FSMContext):
    try:
        with Session() as session:
            products = session.query(Product).all()
            if not products:
                await message.answer("‚ùå –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏")
                return

            markup = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text=f"{p.name}", callback_data=f"product_{p.id}")]
                for p in products
            ])
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=markup)
            await state.set_state(RecordSaleState.select_product)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤")

# –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–¥–µ—Å—å ‚Üì
@dp.callback_query(F.data == "cancel_sale", RecordSaleState.select_product)
async def cancel_sale(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("–ó–∞–ø–∏—Å—å –ø—Ä–æ–¥–∞–∂–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await cmd_start(callback.message)


@dp.callback_query(F.data.startswith("product_"), RecordSaleState.select_product)
async def select_product(callback: types.CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∏–ª–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if callback.data in ["üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", "üíµ –ó–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–∂—É", "üì¶ –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "üîô –ù–∞–∑–∞–¥"]:
        await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await cmd_start(callback.message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        return

    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
    product_id = int(callback.data.split("_")[1])
    with Session() as session:
        product = session.query(Product).get(product_id)
        markup = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text=f"{flavor.name} ({flavor.quantity})", callback_data=f"flavor_{flavor.id}")]
            for flavor in product.flavors
        ])
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å:", reply_markup=markup)
        await state.update_data(product_id=product_id)
        await state.set_state(RecordSaleState.select_flavor)


@dp.callback_query(F.data.startswith("flavor_"), RecordSaleState.select_flavor)
async def select_flavor(callback: types.CallbackQuery, state: FSMContext):
    flavor_id = int(callback.data.split("_")[1])
    await state.update_data(flavor_id=flavor_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:")
    await state.set_state(RecordSaleState.enter_quantity)

@dp.message(RecordSaleState.enter_quantity)
async def enter_sale_quantity(message: types.Message, state: FSMContext):
    try:
        quantity = int(message.text)
        data = await state.get_data()

        with Session() as session:
            flavor = session.query(Flavor).get(data['flavor_id'])
            product = session.query(Product).get(data['product_id'])

            if flavor.quantity < quantity:
                await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å: {flavor.quantity}")
                return

            flavor.quantity -= quantity

            sale = Sale(
                product=product,
                flavor=flavor,
                quantity=quantity,
                purchase_price=product.purchase_price,
                sale_price=product.sale_price
            )
            session.add(sale)

            profit = (sale.sale_price - sale.purchase_price) * quantity
            lena_income = profit * 0.3

            today = datetime.datetime.now().date()
            current_week_start = datetime.datetime.combine(
                today - datetime.timedelta(days=today.weekday()),
                datetime.time.min
            )
            income_record = session.query(WorkerIncome).filter(
                WorkerIncome.week_start == current_week_start
            ).first()

            if not income_record:
                income_record = WorkerIncome(
                    week_start=current_week_start,
                    income=0.0,
                    is_current=True
                )
                session.add(income_record)

            income_record.income += lena_income

            session.query(WorkerIncome).filter(
                WorkerIncome.week_start != current_week_start
            ).update({WorkerIncome.is_current: False})

            session.commit()

            await message.answer(
                f"‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n"
                f"üì¶ –¢–æ–≤–∞—Ä: {product.name}\n"
                f"üçè –í–∫—É—Å: {flavor.name}\n"
                f"üì¶ –ü—Ä–æ–¥–∞–Ω–æ: {quantity} —à—Ç.\n"
                f"üí∞ –í—ã—Ä—É—á–∫–∞: {quantity * product.sale_price} ‚ÇΩ\n"
                f"üë®üíº –î–æ—Ö–æ–¥ –õ—ë–Ω–∏: {lena_income:.2f} ‚ÇΩ"
            )
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
    finally:
        await state.clear()

# ======================= –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ ======================= #
@dp.message(F.text == "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
async def show_analytics(message: types.Message):
    markup = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
             types.KeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü")],
            [types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )
    await message.answer("üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:", reply_markup=markup)

@dp.message(F.text == "üìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_current_stats(message: types.Message):
    try:
        with Session() as session:
            today = datetime.date.today()

            current_week_start = datetime.datetime.combine(
                today - datetime.timedelta(days=today.weekday()),
                datetime.time.min
            )

            current_week_income = session.query(WorkerIncome).filter(
                WorkerIncome.week_start == current_week_start
            ).first()

            daily_sales = session.query(Sale).filter(func.date(Sale.date) == today).all()
            monthly_sales = session.query(Sale).filter(
                func.extract('month', Sale.date) == today.month,
                func.extract('year', Sale.date) == today.year
            ).all()

            def calculate_stats(sales):
                revenue = sum(s.sale_price * s.quantity for s in sales)
                profit = sum((s.sale_price - s.purchase_price) * s.quantity for s in sales)
                lena = profit * 0.3
                return revenue, profit, lena

            daily_revenue, daily_profit, daily_lena = calculate_stats(daily_sales)
            monthly_revenue, monthly_profit, monthly_lena = calculate_stats(monthly_sales)

            current_week_income_value = current_week_income.income if current_week_income else 0.0

            last_week_start = current_week_start - datetime.timedelta(weeks=1)
            last_week_income = session.query(WorkerIncome).filter_by(week_start=last_week_start).first()

            response = [
                "üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂</b>",
                f"\nüïí <u>–°–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m.%Y')}):</u>",
                f"‚îú –í—ã—Ä—É—á–∫–∞: {daily_revenue:.2f} ‚ÇΩ",
                f"‚îú –ü—Ä–∏–±—ã–ª—å: {daily_profit:.2f} ‚ÇΩ",
                f"‚îî –î–æ—Ö–æ–¥ –õ—ë–Ω–∏: {daily_lena:.2f} ‚ÇΩ",

                f"\nüìÖ <u>–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:</u>",
                f"‚îú –í—ã—Ä—É—á–∫–∞: {monthly_revenue:.2f} ‚ÇΩ",
                f"‚îú –ü—Ä–∏–±—ã–ª—å: {monthly_profit:.2f} ‚ÇΩ",
                f"‚îî –î–æ—Ö–æ–¥ –õ—ë–Ω–∏: {monthly_lena:.2f} ‚ÇΩ",

                f"\nüìÜ <u>–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è ({current_week_start.strftime('%d.%m')}):</u>",
                f"‚îî –î–æ—Ö–æ–¥ –õ—ë–Ω–∏: {current_week_income_value:.2f} ‚ÇΩ",
            ]

            if last_week_income:
                response.append(f"\n‚èÆ <u>–ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è:</u>\n‚îî –î–æ—Ö–æ–¥ –õ—ë–Ω–∏: {last_week_income.income:.2f} ‚ÇΩ")

            await message.answer("\n".join(response))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
@dp.message(F.text == "üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç –∑–∞ –º–µ—Å—è—Ü")
async def download_month_report(message: types.Message):
    with Session() as session:
        try:
            today = datetime.date.today()
            first_day = datetime.date(today.year, today.month, 1)
            last_day = datetime.date(
                today.year + (today.month // 12),
                (today.month % 12) + 1, 1
            ) - datetime.timedelta(days=1)

            date_range = pd.date_range(start=first_day, end=last_day)

            report_data = []
            for single_date in date_range:
                sales = session.query(Sale).filter(
                    func.date(Sale.date) == single_date.date()
                ).all()

                total_sales = len(sales)
                total_revenue = sum(s.sale_price * s.quantity for s in sales)
                total_profit = sum((s.sale_price - s.purchase_price) * s.quantity for s in sales)
                lena_income = total_profit * 0.3

                report_data.append({
                    "–î–∞—Ç–∞": single_date.strftime("%d.%m.%Y"),
                    "–ü—Ä–æ–¥–∞–∂–∏": total_sales,
                    "–î–æ—Ö–æ–¥": total_revenue,
                    "–ü—Ä–∏–±—ã–ª—å": total_profit,
                    "–î–æ—Ö–æ–¥ –õ—ë–Ω–∏": lena_income
                })

            df = pd.DataFrame(report_data)
            totals = pd.DataFrame([{
                "–î–∞—Ç–∞": "–ò–¢–û–ì–û:",
                "–ü—Ä–æ–¥–∞–∂–∏": df["–ü—Ä–æ–¥–∞–∂–∏"].sum(),
                "–î–æ—Ö–æ–¥": df["–î–æ—Ö–æ–¥"].sum(),
                "–ü—Ä–∏–±—ã–ª—å": df["–ü—Ä–∏–±—ã–ª—å"].sum(),
                "–î–æ—Ö–æ–¥ –õ—ë–Ω–∏": df["–î–æ—Ö–æ–¥ –õ—ë–Ω–∏"].sum()
            }])

            df = pd.concat([df, totals], ignore_index=True)

            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                df.to_excel(writer, index=False, sheet_name='–û—Ç—á–µ—Ç')

                workbook = writer.book
                worksheet = writer.sheets['–û—Ç—á–µ—Ç']

                num_format = workbook.add_format({'num_format': '#,##0.00‚ÇΩ'})
                date_format = workbook.add_format({'num_format': 'dd.mm.yyyy'})

                worksheet.set_column('A:A', 12, date_format)
                worksheet.set_column('B:E', 15, num_format)

                totals_format = workbook.add_format({
                    'bold': True,
                    'bg_color': '#FFFF00',
                    'num_format': '#,##0.00‚ÇΩ'
                })

                last_row = len(df)
                for col in range(4):
                    worksheet.write(last_row, col + 1, df.iloc[-1, col + 1], totals_format)

            output.seek(0)

            await message.answer_document(
                types.BufferedInputFile(output.read(), filename="month_report.xlsx"),
                caption=f"üìä –û—Ç—á–µ—Ç –∑–∞ {today.strftime('%B %Y')}"
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")

# ======================= –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ======================= #
@dp.message()
async def handle_unknown(message: types.Message):
    await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /start")

@dp.callback_query()
async def handle_unknown_callback(callback: types.CallbackQuery):
    await callback.answer("‚ö†Ô∏è –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)

# ======================= –ó–ê–ü–£–°–ö ======================= #
if __name__ == "__main__":
    import asyncio

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    asyncio.run(dp.start_polling(bot))

